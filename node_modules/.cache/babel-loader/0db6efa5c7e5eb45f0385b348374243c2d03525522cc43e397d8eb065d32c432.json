{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"D:/Lowcode/vue-low-code/node_modules/@babel/runtime/helpers/interopRequireDefault.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _axios = _interopRequireDefault(require(\"axios\"));\nvar _env = _interopRequireDefault(require(\"@/api/http/env\"));\nvar _elementUi = require(\"element-ui\");\n//引入axios\n\nconsole.log(\"process.env\", process.env);\n// 创建axios实例\nconst service = _axios.default.create({\n  //这里拿开发接口测试\n  baseURL: process.env.VUE_APP_BASE_URL,\n  headers: {\n    'Content-type': 'application/x-www-form-urlencoded'\n  },\n  //设置指定请求头\n  timeout: 5000 //超时时间\n});\n// 请求拦截器\nservice.interceptors.request.use(config => {\n  //验证token\n  // console.log(\"请求的数据:\", config);\n  // if (localStorage.getItem('token')) {\n  //   config.headers.token = localStorage.getItem('token')\n  // }\n  return config;\n}, error => {\n  // 对请求错误做些什么\n  // console.log(\"请求的数据:\", error);\n  return Promise.reject(error);\n});\n\n// 响应拦截器\nservice.interceptors.response.use(response => {\n  // console.log(\"返回的数据\", response);\n  // 这里拦截401错误，并重新跳入登页重新获取token\n  if (response.status && response.status === 200) {\n    // 通讯成功\n    //   if (response.data.code === 401) { \n    //     // 如果是token过期，跳转至登录\n    //     Message.error(\"登陆过期重新登陆\")\n    //     localStorage.removeItem('token') // 移除token，跳转至登录\n    //     router.push({ \n    //       path: '/login'\n    //     })\n    //   }\n    return Promise.resolve(response.data);\n  }\n}, err => {\n  // 对响应错误做点什么.\n  if (err && err.response) {\n    switch (err.response.status) {\n      case 400:\n        err.message = '请求错误';\n        _elementUi.Message.error(err.message);\n        break;\n      case 401:\n        err.message = '未授权，请登录';\n        _elementUi.Message.error(err.message);\n        break;\n      case 403:\n        err.message = '拒绝访问';\n        _elementUi.Message.error(err.message);\n        break;\n      case 404:\n        err.message = `请求地址出错: ${err.response.config.url}`;\n        _elementUi.Message.error(err.message);\n        break;\n      case 408:\n        err.message = '请求超时';\n        _elementUi.Message.error(err.message);\n        break;\n      case 500:\n        err.message = '服务器内部错误';\n        _elementUi.Message.error(err.message);\n        break;\n      case 501:\n        err.message = '服务未实现';\n        _elementUi.Message.error(err.message);\n        break;\n      case 502:\n        err.message = '网关错误';\n        _elementUi.Message.error(err.message);\n        break;\n      case 503:\n        err.message = '服务不可用';\n        _elementUi.Message.error(err.message);\n        break;\n      case 504:\n        err.message = '网关超时';\n        _elementUi.Message.error(err.message);\n        break;\n      case 505:\n        err.message = 'HTTP版本不受支持';\n        _elementUi.Message.error(err.message);\n        break;\n      case 0:\n        err.message = '接口不存在';\n        console.log(\"111\");\n        _elementUi.Message.error(err.message);\n        break;\n      default:\n    }\n  }\n  return Promise.reject(err); // 返回接口返回的错误信息\n});\nvar _default = service;\nexports.default = _default;","map":{"version":3,"names":["_axios","_interopRequireDefault","require","_env","_elementUi","console","log","process","env","service","axios","create","baseURL","VUE_APP_BASE_URL","headers","timeout","interceptors","request","use","config","error","Promise","reject","response","status","resolve","data","err","message","Message","url","_default","exports","default"],"sources":["D:/Lowcode/vue-low-code/src/utils/request.js"],"sourcesContent":["import axios from \"axios\";  //引入axios\r\nimport env from \"@/api/http/env\";\r\nimport { Message } from \"element-ui\";\r\nconsole.log(\"process.env\",process.env)\r\n// 创建axios实例\r\nconst service = axios.create({\r\n    //这里拿开发接口测试\r\n    baseURL: process.env.VUE_APP_BASE_URL,\r\n    headers: {\r\n        'Content-type': 'application/x-www-form-urlencoded',\r\n    },//设置指定请求头\r\n    timeout: 5000,//超时时间\r\n});\r\n// 请求拦截器\r\nservice.interceptors.request.use(\r\n    config => {\r\n        //验证token\r\n        // console.log(\"请求的数据:\", config);\r\n        // if (localStorage.getItem('token')) {\r\n        //   config.headers.token = localStorage.getItem('token')\r\n        // }\r\n        return config;\r\n    },\r\n    error => {\r\n        // 对请求错误做些什么\r\n        // console.log(\"请求的数据:\", error);\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// 响应拦截器\r\nservice.interceptors.response.use(\r\n    response => {\r\n        // console.log(\"返回的数据\", response);\r\n        // 这里拦截401错误，并重新跳入登页重新获取token\r\n        if (response.status && response.status === 200) {\r\n            // 通讯成功\r\n            //   if (response.data.code === 401) { \r\n            //     // 如果是token过期，跳转至登录\r\n            //     Message.error(\"登陆过期重新登陆\")\r\n            //     localStorage.removeItem('token') // 移除token，跳转至登录\r\n            //     router.push({ \r\n            //       path: '/login'\r\n            //     })\r\n            //   }\r\n            return Promise.resolve(response.data)\r\n        }\r\n    },\r\n    err => {\r\n        // 对响应错误做点什么.\r\n        if (err && err.response) {\r\n            switch (err.response.status) {\r\n                case 400:\r\n                    err.message = '请求错误'\r\n                    Message.error(err.message)\r\n\r\n                    break\r\n                case 401:\r\n                    err.message = '未授权，请登录'\r\n                    Message.error(err.message)\r\n                    break\r\n                case 403:\r\n                    err.message = '拒绝访问'\r\n                    Message.error(err.message)\r\n                    break\r\n                case 404:\r\n                    err.message = `请求地址出错: ${err.response.config.url}`\r\n                    Message.error(err.message)\r\n                    break\r\n                case 408:\r\n                    err.message = '请求超时'\r\n                    Message.error(err.message)\r\n                    break\r\n                case 500:\r\n                    err.message = '服务器内部错误'\r\n                    Message.error(err.message)\r\n                    break\r\n                case 501:\r\n                    err.message = '服务未实现'\r\n                    Message.error(err.message)\r\n                    break\r\n                case 502:\r\n                    err.message = '网关错误'\r\n                    Message.error(err.message)\r\n                    break\r\n                case 503:\r\n                    err.message = '服务不可用'\r\n                    Message.error(err.message)\r\n                    break\r\n                case 504:\r\n                    err.message = '网关超时'\r\n                    Message.error(err.message)\r\n                    break\r\n                case 505:\r\n                    err.message = 'HTTP版本不受支持'\r\n                    Message.error(err.message)\r\n                    break\r\n                case 0:\r\n                    err.message = '接口不存在'\r\n                    console.log(\"111\");\r\n                    Message.error(err.message)\r\n                    break\r\n                default:\r\n            }\r\n        }\r\n        return Promise.reject(err) // 返回接口返回的错误信息\r\n    }\r\n);\r\nexport default service;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}