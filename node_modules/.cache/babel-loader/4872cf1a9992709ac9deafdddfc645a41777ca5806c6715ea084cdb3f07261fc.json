{"ast":null,"code":"import \"dhtmlx-gantt/codebase/dhtmlxgantt.css\";\nimport Gantt from \"dhtmlx-gantt/codebase/dhtmlxgantt.js\";\nexport default {\n  components: {\n    Gantt\n  },\n  data() {\n    return {\n      ganttTasks: [{\n        id: 1,\n        text: 'Task 1',\n        plannedStart: '2023-07-01',\n        plannedEnd: '2023-07-15',\n        actualStart: '2023-07-05',\n        actualEnd: '2023-07-10'\n      }],\n      ganttLinks: [],\n      // 如果需要显示任务之间的关系，可以设置相应的链接\n      ganttConfig: {\n        scale_unit: 'day',\n        step: 1,\n        date_scale: '%Y-%m-%d',\n        columns: [{\n          name: 'text',\n          label: '任务名称',\n          align: 'left',\n          width: '*'\n        }, {\n          name: 'plannedTimeline',\n          label: '计划时间',\n          align: 'center',\n          width: 300,\n          template: item => {\n            return `\n                <div class=\"timeline\">\n                  <div class=\"planned-timeline\" style=\"\n                    width: ${this.calculateTimelineWidth(item.plannedStart, item.plannedEnd)}%;\n                    left: ${this.calculateTimelinePosition(item.plannedStart)}%;\n                  \"></div>\n                  <div class=\"actual-timeline\" style=\"\n                    width: ${this.calculateTimelineWidth(item.actualStart, item.actualEnd)}%;\n                    left: ${this.calculateTimelinePosition(item.actualStart)}%;\n                  \"></div>\n                </div>\n              `;\n          }\n        }]\n      }\n    };\n  },\n  methods: {\n    calculateTimelineWidth(start, end) {\n      const startDate = new Date(start);\n      const endDate = new Date(end);\n      const totalDuration = endDate.getTime() - startDate.getTime();\n      const ganttStartDate = new Date(Gantt.getGanttInstance().config.start_date);\n      const ganttEndDate = new Date(Gantt.getGanttInstance().config.end_date);\n      const ganttDuration = ganttEndDate.getTime() - ganttStartDate.getTime();\n      return totalDuration / ganttDuration * 100;\n    },\n    calculateTimelinePosition(start) {\n      const startDate = new Date(start);\n      const ganttStartDate = new Date(Gantt.getGanttInstance().config.start_date);\n      const ganttEndDate = new Date(Gantt.getGanttInstance().config.end_date);\n      const ganttDuration = ganttEndDate.getTime() - ganttStartDate.getTime();\n      return (startDate.getTime() - ganttStartDate.getTime()) / ganttDuration * 100;\n    }\n  }\n  // ...\n};","map":{"version":3,"names":["Gantt","components","data","ganttTasks","id","text","plannedStart","plannedEnd","actualStart","actualEnd","ganttLinks","ganttConfig","scale_unit","step","date_scale","columns","name","label","align","width","template","item","calculateTimelineWidth","calculateTimelinePosition","methods","start","end","startDate","Date","endDate","totalDuration","getTime","ganttStartDate","getGanttInstance","config","start_date","ganttEndDate","end_date","ganttDuration"],"sources":["src/components/Gantt/Gantetu.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div ref=\"ganttContainer\">\r\n      <Gantt :tasks=\"ganttTasks\" :links=\"ganttLinks\" :config=\"ganttConfig\" />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport \"dhtmlx-gantt/codebase/dhtmlxgantt.css\";\r\nimport Gantt from \"dhtmlx-gantt/codebase/dhtmlxgantt.js\";\r\n\r\nexport default {\r\n  components: {\r\n    Gantt\r\n  },\r\n  data() {\r\n    return {\r\n      ganttTasks: [\r\n        {\r\n          id: 1,\r\n          text: 'Task 1',\r\n          plannedStart: '2023-07-01',\r\n          plannedEnd: '2023-07-15',\r\n          actualStart: '2023-07-05',\r\n          actualEnd: '2023-07-10'\r\n        }\r\n      ],\r\n      ganttLinks: [], // 如果需要显示任务之间的关系，可以设置相应的链接\r\n      ganttConfig: {\r\n        scale_unit: 'day',\r\n        step: 1,\r\n        date_scale: '%Y-%m-%d',\r\n        columns: [\r\n          { name: 'text', label: '任务名称', align: 'left', width: '*' },\r\n          { name: 'plannedTimeline', label: '计划时间', align: 'center', width: 300,\r\n            template: (item) => {\r\n              return `\r\n                <div class=\"timeline\">\r\n                  <div class=\"planned-timeline\" style=\"\r\n                    width: ${this.calculateTimelineWidth(item.plannedStart, item.plannedEnd)}%;\r\n                    left: ${this.calculateTimelinePosition(item.plannedStart)}%;\r\n                  \"></div>\r\n                  <div class=\"actual-timeline\" style=\"\r\n                    width: ${this.calculateTimelineWidth(item.actualStart, item.actualEnd)}%;\r\n                    left: ${this.calculateTimelinePosition(item.actualStart)}%;\r\n                  \"></div>\r\n                </div>\r\n              `;\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    calculateTimelineWidth(start, end) {\r\n      const startDate = new Date(start);\r\n      const endDate = new Date(end);\r\n      const totalDuration = endDate.getTime() - startDate.getTime();\r\n      const ganttStartDate = new Date(Gantt.getGanttInstance().config.start_date);\r\n      const ganttEndDate = new Date(Gantt.getGanttInstance().config.end_date);\r\n      const ganttDuration = ganttEndDate.getTime() - ganttStartDate.getTime();\r\n      return (totalDuration / ganttDuration) * 100;\r\n    },\r\n    calculateTimelinePosition(start) {\r\n      const startDate = new Date(start);\r\n      const ganttStartDate = new Date(Gantt.getGanttInstance().config.start_date);\r\n      const ganttEndDate = new Date(Gantt.getGanttInstance().config.end_date);\r\n      const ganttDuration = ganttEndDate.getTime() - ganttStartDate.getTime();\r\n      return ((startDate.getTime() - ganttStartDate.getTime()) / ganttDuration) * 100;\r\n    }\r\n  },\r\n  // ...\r\n}\r\n</script>\r\n\r\n<style>\r\n.timeline {\r\n  position: relative;\r\n  height: 15px;\r\n  border-radius: 4px;\r\n  border: 1px solid #ccc;\r\n}\r\n\r\n.planned-timeline {\r\n  position: absolute;\r\n  height: 100%;\r\n  background-color: #007bff;\r\n}\r\n\r\n.actual-timeline {\r\n  position: absolute;\r\n  height: 100%;\r\n  background-color: #ffc107;\r\n}\r\n</style>"],"mappings":"AASA;AACA,OAAAA,KAAA;AAEA;EACAC,UAAA;IACAD;EACA;EACAE,KAAA;IACA;MACAC,UAAA,GACA;QACAC,EAAA;QACAC,IAAA;QACAC,YAAA;QACAC,UAAA;QACAC,WAAA;QACAC,SAAA;MACA,EACA;MACAC,UAAA;MAAA;MACAC,WAAA;QACAC,UAAA;QACAC,IAAA;QACAC,UAAA;QACAC,OAAA,GACA;UAAAC,IAAA;UAAAC,KAAA;UAAAC,KAAA;UAAAC,KAAA;QAAA,GACA;UAAAH,IAAA;UAAAC,KAAA;UAAAC,KAAA;UAAAC,KAAA;UACAC,QAAA,EAAAC,IAAA;YACA;AACA;AACA;AACA,kCAAAC,sBAAA,CAAAD,IAAA,CAAAf,YAAA,EAAAe,IAAA,CAAAd,UAAA;AACA,iCAAAgB,yBAAA,CAAAF,IAAA,CAAAf,YAAA;AACA;AACA;AACA,kCAAAgB,sBAAA,CAAAD,IAAA,CAAAb,WAAA,EAAAa,IAAA,CAAAZ,SAAA;AACA,iCAAAc,yBAAA,CAAAF,IAAA,CAAAb,WAAA;AACA;AACA;AACA;UACA;QACA;MAEA;IACA;EACA;EACAgB,OAAA;IACAF,uBAAAG,KAAA,EAAAC,GAAA;MACA,MAAAC,SAAA,OAAAC,IAAA,CAAAH,KAAA;MACA,MAAAI,OAAA,OAAAD,IAAA,CAAAF,GAAA;MACA,MAAAI,aAAA,GAAAD,OAAA,CAAAE,OAAA,KAAAJ,SAAA,CAAAI,OAAA;MACA,MAAAC,cAAA,OAAAJ,IAAA,CAAA5B,KAAA,CAAAiC,gBAAA,GAAAC,MAAA,CAAAC,UAAA;MACA,MAAAC,YAAA,OAAAR,IAAA,CAAA5B,KAAA,CAAAiC,gBAAA,GAAAC,MAAA,CAAAG,QAAA;MACA,MAAAC,aAAA,GAAAF,YAAA,CAAAL,OAAA,KAAAC,cAAA,CAAAD,OAAA;MACA,OAAAD,aAAA,GAAAQ,aAAA;IACA;IACAf,0BAAAE,KAAA;MACA,MAAAE,SAAA,OAAAC,IAAA,CAAAH,KAAA;MACA,MAAAO,cAAA,OAAAJ,IAAA,CAAA5B,KAAA,CAAAiC,gBAAA,GAAAC,MAAA,CAAAC,UAAA;MACA,MAAAC,YAAA,OAAAR,IAAA,CAAA5B,KAAA,CAAAiC,gBAAA,GAAAC,MAAA,CAAAG,QAAA;MACA,MAAAC,aAAA,GAAAF,YAAA,CAAAL,OAAA,KAAAC,cAAA,CAAAD,OAAA;MACA,QAAAJ,SAAA,CAAAI,OAAA,KAAAC,cAAA,CAAAD,OAAA,MAAAO,aAAA;IACA;EACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}