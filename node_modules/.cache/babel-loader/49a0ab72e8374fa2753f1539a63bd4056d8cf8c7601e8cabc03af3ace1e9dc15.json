{"ast":null,"code":"import { gantt } from 'dhtmlx-gantt';\nexport default {\n  mounted() {\n    this.renderGantt();\n  },\n  methods: {\n    renderGantt() {\n      gantt.config.xml_date = '%Y-%m-%d %H:%i'; // 日期格式\n\n      const tasks = [{\n        id: 1,\n        start_date: '2023-07-01 08:00',\n        // 开始时间\n        end_date: '2023-07-01 12:00',\n        // 结束时间\n        text: '任务1' // 任务名称\n      }];\n\n      const config = {\n        scale_unit: 'day',\n        // 刻度单位\n        step: 1,\n        // 步长\n        date_format: '%Y-%m-%d',\n        // 日期显示格式\n        min_column_width: 50,\n        // 最小列宽度\n        columns: [{\n          name: 'text',\n          label: '任务名称',\n          width: '*',\n          tree: true\n        }, {\n          name: 'start_date',\n          label: '开始时间',\n          width: 150\n        }, {\n          name: 'end_date',\n          label: '结束时间',\n          width: 150\n        }, {\n          name: 'duration',\n          label: '持续时间',\n          width: 100\n        }],\n        show_chart: true,\n        // 显示甘特图\n        show_grid: true // 显示表格\n      };\n\n      gantt.init(this.$refs.ganttContainer);\n      gantt.parse({\n        data: tasks\n      });\n      gantt.config.subscales = [{\n        unit: 'hour',\n        step: 1,\n        date: '%H'\n      },\n      // 第一个轴（小时）\n      {\n        unit: 'minute',\n        step: 30,\n        date: '%i'\n      } // 第二个轴（分钟）\n      ];\n\n      gantt.templates.scale_cell_class = function (date) {\n        const hour = date.getHours();\n        const minute = date.getMinutes();\n        if (hour === 8 && minute === 0) {\n          return 'highlight'; // 高亮显示8:00\n        }\n\n        return '';\n      };\n      gantt.config.layout = {\n        css: 'gantt_container',\n        rows: [{\n          cols: [{\n            view: 'grid',\n            scrollX: 'gridScroll',\n            scrollable: true,\n            scrollY: 'scrollVer'\n          }, {\n            resizer: true,\n            width: 1\n          }, {\n            view: 'timeline',\n            scrollX: 'scrollHor',\n            scrollY: 'scrollVer'\n          }, {\n            view: 'scrollbar',\n            id: 'gridScroll',\n            group: 'horizontal'\n          }],\n          gravity: 1\n        }, {\n          view: 'scrollbar',\n          id: 'scrollVer',\n          group: 'vertical'\n        }, {\n          view: 'scrollbar',\n          id: 'scrollHor',\n          group: 'horizontal'\n        }]\n      };\n      gantt.render();\n\n      // 若需要监听事件，例如点击事件\n      gantt.attachEvent('onTaskClick', (id, e) => {\n        const task = gantt.getTask(id);\n        console.log(task); // 输出点击的任务数据\n      });\n    }\n  }\n};","map":{"version":3,"names":["gantt","mounted","renderGantt","methods","config","xml_date","tasks","id","start_date","end_date","text","scale_unit","step","date_format","min_column_width","columns","name","label","width","tree","show_chart","show_grid","init","$refs","ganttContainer","parse","data","subscales","unit","date","templates","scale_cell_class","hour","getHours","minute","getMinutes","layout","css","rows","cols","view","scrollX","scrollable","scrollY","resizer","group","gravity","render","attachEvent","e","task","getTask","console","log"],"sources":["src/components/Gantt/Gantetu.vue"],"sourcesContent":["<template>\r\n  <div ref=\"ganttContainer\"></div>\r\n</template>\r\n\r\n<script>\r\nimport { gantt } from 'dhtmlx-gantt';\r\n\r\nexport default {\r\n  mounted() {\r\n    this.renderGantt();\r\n  },\r\n  methods: {\r\n    renderGantt() {\r\n      gantt.config.xml_date = '%Y-%m-%d %H:%i'; // 日期格式\r\n\r\n      const tasks = [\r\n        {\r\n          id: 1,\r\n          start_date: '2023-07-01 08:00', // 开始时间\r\n          end_date: '2023-07-01 12:00', // 结束时间\r\n          text: '任务1' // 任务名称\r\n        }\r\n      ];\r\n\r\n      const config = {\r\n        scale_unit: 'day', // 刻度单位\r\n        step: 1, // 步长\r\n        date_format: '%Y-%m-%d', // 日期显示格式\r\n        min_column_width: 50, // 最小列宽度\r\n        columns: [\r\n          { name: 'text', label: '任务名称', width: '*', tree: true },\r\n          { name: 'start_date', label: '开始时间', width: 150 },\r\n          { name: 'end_date', label: '结束时间', width: 150 },\r\n          { name: 'duration', label: '持续时间', width: 100 }\r\n        ],\r\n        show_chart: true, // 显示甘特图\r\n        show_grid: true // 显示表格\r\n      };\r\n\r\n      gantt.init(this.$refs.ganttContainer);\r\n      gantt.parse({ data: tasks });\r\n      gantt.config.subscales = [\r\n        { unit: 'hour', step: 1, date: '%H' }, // 第一个轴（小时）\r\n        { unit: 'minute', step: 30, date: '%i' } // 第二个轴（分钟）\r\n      ];\r\n      gantt.templates.scale_cell_class = function (date) {\r\n        const hour = date.getHours();\r\n        const minute = date.getMinutes();\r\n        if (hour === 8 && minute === 0) {\r\n          return 'highlight'; // 高亮显示8:00\r\n        }\r\n        return '';\r\n      };\r\n      gantt.config.layout = {\r\n        css: 'gantt_container',\r\n        rows: [\r\n          {\r\n            cols: [\r\n              { view: 'grid', scrollX: 'gridScroll', scrollable: true, scrollY: 'scrollVer' },\r\n              { resizer: true, width: 1 },\r\n              { view: 'timeline', scrollX: 'scrollHor', scrollY: 'scrollVer' },\r\n              { view: 'scrollbar', id: 'gridScroll', group: 'horizontal' }\r\n            ],\r\n            gravity: 1\r\n          },\r\n          { view: 'scrollbar', id: 'scrollVer', group: 'vertical' },\r\n          { view: 'scrollbar', id: 'scrollHor', group: 'horizontal' }\r\n        ]\r\n      };\r\n\r\n      gantt.render();\r\n\r\n      // 若需要监听事件，例如点击事件\r\n      gantt.attachEvent('onTaskClick', (id, e) => {\r\n        const task = gantt.getTask(id);\r\n        console.log(task); // 输出点击的任务数据\r\n      });\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n.gantt_container {\r\n  width: 100%;\r\n  height: 600px;\r\n}\r\n</style>"],"mappings":"AAKA,SAAAA,KAAA;AAEA;EACAC,QAAA;IACA,KAAAC,WAAA;EACA;EACAC,OAAA;IACAD,YAAA;MACAF,KAAA,CAAAI,MAAA,CAAAC,QAAA;;MAEA,MAAAC,KAAA,IACA;QACAC,EAAA;QACAC,UAAA;QAAA;QACAC,QAAA;QAAA;QACAC,IAAA;MACA,EACA;;MAEA,MAAAN,MAAA;QACAO,UAAA;QAAA;QACAC,IAAA;QAAA;QACAC,WAAA;QAAA;QACAC,gBAAA;QAAA;QACAC,OAAA,GACA;UAAAC,IAAA;UAAAC,KAAA;UAAAC,KAAA;UAAAC,IAAA;QAAA,GACA;UAAAH,IAAA;UAAAC,KAAA;UAAAC,KAAA;QAAA,GACA;UAAAF,IAAA;UAAAC,KAAA;UAAAC,KAAA;QAAA,GACA;UAAAF,IAAA;UAAAC,KAAA;UAAAC,KAAA;QAAA,EACA;QACAE,UAAA;QAAA;QACAC,SAAA;MACA;;MAEArB,KAAA,CAAAsB,IAAA,MAAAC,KAAA,CAAAC,cAAA;MACAxB,KAAA,CAAAyB,KAAA;QAAAC,IAAA,EAAApB;MAAA;MACAN,KAAA,CAAAI,MAAA,CAAAuB,SAAA,IACA;QAAAC,IAAA;QAAAhB,IAAA;QAAAiB,IAAA;MAAA;MAAA;MACA;QAAAD,IAAA;QAAAhB,IAAA;QAAAiB,IAAA;MAAA;MAAA,CACA;;MACA7B,KAAA,CAAA8B,SAAA,CAAAC,gBAAA,aAAAF,IAAA;QACA,MAAAG,IAAA,GAAAH,IAAA,CAAAI,QAAA;QACA,MAAAC,MAAA,GAAAL,IAAA,CAAAM,UAAA;QACA,IAAAH,IAAA,UAAAE,MAAA;UACA;QACA;;QACA;MACA;MACAlC,KAAA,CAAAI,MAAA,CAAAgC,MAAA;QACAC,GAAA;QACAC,IAAA,GACA;UACAC,IAAA,GACA;YAAAC,IAAA;YAAAC,OAAA;YAAAC,UAAA;YAAAC,OAAA;UAAA,GACA;YAAAC,OAAA;YAAA1B,KAAA;UAAA,GACA;YAAAsB,IAAA;YAAAC,OAAA;YAAAE,OAAA;UAAA,GACA;YAAAH,IAAA;YAAAjC,EAAA;YAAAsC,KAAA;UAAA,EACA;UACAC,OAAA;QACA,GACA;UAAAN,IAAA;UAAAjC,EAAA;UAAAsC,KAAA;QAAA,GACA;UAAAL,IAAA;UAAAjC,EAAA;UAAAsC,KAAA;QAAA;MAEA;MAEA7C,KAAA,CAAA+C,MAAA;;MAEA;MACA/C,KAAA,CAAAgD,WAAA,iBAAAzC,EAAA,EAAA0C,CAAA;QACA,MAAAC,IAAA,GAAAlD,KAAA,CAAAmD,OAAA,CAAA5C,EAAA;QACA6C,OAAA,CAAAC,GAAA,CAAAH,IAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}