{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as echarts from \"echarts\";\nimport \"echarts/src/chart/pie\";\nimport \"echarts-gl\";\nexport default {\n  data() {\n    return {\n      optionData: [{\n        name: \"通过\",\n        value: 50,\n        itemStyle: {\n          opacity: 1,\n          color: \"#4d7dd2\"\n        }\n      }, {\n        name: \"不通过\",\n        value: 25,\n        itemStyle: {\n          opacity: 1,\n          color: \"#fd8839\"\n        }\n      }, {\n        name: \"取消/延迟\",\n        value: 25,\n        itemStyle: {\n          opacity: 1,\n          color: \"#b2b2b2\"\n        }\n      }]\n    };\n  },\n  mounted() {\n    this.echartsPie();\n  },\n  methods: {\n    echartsPie() {\n      let hoveredIndex = \"\";\n      // let chartDom = this.$refs[\"basicDataPie\"];\n      let myChart = echarts.init(document.getElementById(\"mainTwo\"));\n      const getPie3D = (pieData, internalDiameterRatio) => {\n        //internalDiameterRatio:透明的空心占比\n        let series = [];\n        let sumValue = 0;\n        let startValue = 0;\n        let endValue = 0;\n        let k = 1;\n        pieData.sort((a, b) => {\n          return b.value - a.value;\n        });\n        // 为每一个饼图数据，生成一个 series-surface 配置\n        for (let i = 0; i < pieData.length; i++) {\n          sumValue += pieData[i].value;\n          let seriesItem = {\n            name: typeof pieData[i].name === \"undefined\" ? `series${i}` : pieData[i].name,\n            type: \"surface\",\n            parametric: true,\n            wireframe: {\n              show: false\n            },\n            pieData: pieData[i],\n            pieStatus: {\n              selected: false,\n              hovered: false,\n              k: k\n            },\n            radius: \"50%\",\n            center: [\"10%\", \"10%\"]\n          };\n          if (typeof pieData[i].itemStyle != \"undefined\") {\n            let itemStyle = {};\n            typeof pieData[i].itemStyle.color != \"undefined\" ? itemStyle.color = pieData[i].itemStyle.color : null;\n            typeof pieData[i].itemStyle.opacity != \"undefined\" ? itemStyle.opacity = pieData[i].itemStyle.opacity : null;\n            seriesItem.itemStyle = itemStyle;\n          }\n          series.push(seriesItem);\n        }\n\n        // 使用上一次遍历时，计算出的数据和 sumValue，调用 getParametricEquation 函数，\n        // 向每个 series-surface 传入不同的参数方程 series-surface.parametricEquation，也就是实现每一个扇形。\n        for (let i = 0; i < series.length; i++) {\n          endValue = startValue + series[i].pieData.value;\n          series[i].pieData.startRatio = startValue / sumValue;\n          series[i].pieData.endRatio = endValue / sumValue;\n          series[i].parametricEquation = getParametricEquation(series[i].pieData.startRatio, series[i].pieData.endRatio, false, false, k, series[i].pieData.value);\n          startValue = endValue;\n        }\n        let boxHeight = getHeight3D(series, 10); //通过传参设定3d饼/环的高度，26代表26px\n        // 准备待返回的配置项，把准备好的 legendData、series 传入。\n        let option = {\n          backgroundColor: \"#fff\",\n          tooltip: {\n            backgroundColor: \"black\",\n            formatter: params => {\n              if (params.seriesName !== \"mouseoutSeries\" && params.seriesName !== \"pie3d\") {\n                let bfb = ((option.series[params.seriesIndex].pieData.endRatio - option.series[params.seriesIndex].pieData.startRatio) * 100).toFixed(2);\n                return `${params.seriesName}<br/>` + `<span style=\"display:inline-block;margin-right:5px;border-radius:10px;width:10px;height:10px;background-color:${params.color};\"></span>` + `${bfb}%`;\n              }\n            }\n          },\n          legend: {\n            bottom: \"3%\",\n            itemGap: 20,\n            icon: \"path://M0,12L12,12C12,5.37258,6.62742,0,0,0L0,12Z\"\n          },\n          title: {\n            text: \"项目检验进展情况\",\n            left: \"center\",\n            top: \"2%\",\n            textStyle: {\n              fontWeight: 500,\n              fontSize: 16,\n              color: \"#3D3D3D\"\n            }\n          },\n          xAxis3D: {\n            min: -1,\n            max: 1\n          },\n          yAxis3D: {\n            min: -1,\n            max: 1\n          },\n          zAxis3D: {\n            min: -1,\n            max: 1\n          },\n          grid3D: {\n            show: false,\n            boxHeight: boxHeight,\n            top: \"-30\",\n            left: \"10\",\n            bottom: \"60%\",\n            environment: \"auto\",\n            viewControl: {\n              distance: 300,\n              //远近\n              alpha: 25,\n              //饼图X轴旋转\n              beta: -70,\n              //饼图Y轴旋转\n              autoRotate: false //自动旋转\n            }\n          },\n\n          series: series\n        };\n        return option;\n      };\n\n      //获取3d丙图的最高扇区的高度\n      const getHeight3D = (series, height) => {\n        series.sort((a, b) => {\n          return b.pieData.value - a.pieData.value;\n        });\n        return height * 15 / series[0].pieData.value;\n      };\n\n      // 生成扇形的曲面参数方程，用于 series-surface.parametricEquation\n      const getParametricEquation = (startRatio, endRatio, isSelected, isHovered, k, h) => {\n        // 计算\n        let midRatio = (startRatio + endRatio) / 2;\n        let startRadian = startRatio * Math.PI * 2;\n        let endRadian = endRatio * Math.PI * 2;\n        let midRadian = midRatio * Math.PI * 2;\n        // 如果只有一个扇形，则不实现选中效果。\n        if (startRatio === 0 && endRatio === 1) {\n          isSelected = false;\n        }\n        // 通过扇形内径/外径的值，换算出辅助参数 k（默认值 1/3）\n        k = typeof k !== \"undefined\" ? k : 1 / 3;\n        // 计算选中效果分别在 x 轴、y 轴方向上的位移（未选中，则位移均为 0）\n        let offsetX = isSelected ? Math.cos(midRadian) * 0.1 : 0;\n        let offsetY = isSelected ? Math.sin(midRadian) * 0.1 : 0;\n        // 计算高亮效果的放大比例（未高亮，则比例为 1）\n        let hoverRate = isHovered ? 1.05 : 1;\n        // 返回曲面参数方程\n        return {\n          u: {\n            min: -Math.PI,\n            max: Math.PI * 2,\n            step: Math.PI / 32\n          },\n          v: {\n            min: 0,\n            max: Math.PI * 2,\n            step: Math.PI / 80\n          },\n          x: function (u, v) {\n            if (u < startRadian) {\n              return offsetX + Math.cos(startRadian) * (1 + Math.cos(v) * k) * hoverRate;\n            }\n            if (u > endRadian) {\n              return offsetX + Math.cos(endRadian) * (1 + Math.cos(v) * k) * hoverRate;\n            }\n            return offsetX + Math.cos(u) * (1 + Math.cos(v) * k) * hoverRate;\n          },\n          y: function (u, v) {\n            if (u < startRadian) {\n              return offsetY + Math.sin(startRadian) * (1 + Math.cos(v) * k) * hoverRate;\n            }\n            if (u > endRadian) {\n              return offsetY + Math.sin(endRadian) * (1 + Math.cos(v) * k) * hoverRate;\n            }\n            return offsetY + Math.sin(u) * (1 + Math.cos(v) * k) * hoverRate;\n          },\n          z: function (u, v) {\n            if (u < -Math.PI * 0.5) {\n              return Math.sin(u);\n            }\n            if (u > Math.PI * 2.5) {\n              return Math.sin(u) * h * 0.1;\n            }\n            return Math.sin(v) > 0 ? 1 * h * 0.1 : -1;\n          }\n        };\n      };\n      let option = getPie3D(this.optionData, 0.8);\n      //是否需要label指引线，如果要就添加一个透明的2d饼状图并调整角度使得labelLine和3d的饼状图对齐，并再次setOption\n      option.series.push({\n        // name: \"pie3d\",\n        type: \"pie\",\n        label: {\n          color: \"black\",\n          fontSize: 16,\n          //  position: 'inner',\n          // formatter: \"{b}\\n\\n\",\n          // padding: [0, -40],\n          formatter: item => {\n            //  console.log(item)\n            return item.data.name + \":\" + item.data.value + \"\";\n          }\n        },\n        labelLine: {\n          showAbove: false,\n          length: 20,\n          // 视觉引导线第一段的长度\n          length2: 40,\n          // 视觉引导项第二段的长度\n          lineStyle: {\n            color: \"#686868\",\n            // 改变标示线的颜色\n            width: 1,\n            type: \"solid\" // 线的类型\n          }\n        },\n\n        data: this.optionData,\n        // startAngle: -25, //起始角度，支持范围[0, 360]。\n        clockwise: false,\n        //饼图的扇区是否是顺时针排布。上述这两项配置主要是为了对齐3d的样式\n        radius: [\"65%\", \"65%\"],\n        center: [\"55%\", \"48%\"],\n        //指示线的位置\n        itemStyle: {\n          opacity: 0\n        }\n      });\n      option && myChart.setOption(option);\n      myChart.on(\"mouseover\", function (params) {\n        // 准备重新渲染扇形所需的参数\n        let isSelected;\n        let isHovered;\n        let startRatio;\n        let endRatio;\n        let k;\n        let i;\n\n        // 如果触发 mouseover 的扇形当前已高亮，则不做操作\n        if (hoveredIndex === params.seriesIndex) {\n          return;\n\n          // 否则进行高亮及必要的取消高亮操作\n        } else {\n          // 如果当前有高亮的扇形，取消其高亮状态（对 option 更新）\n          if (hoveredIndex !== \"\") {\n            // 从 option.series 中读取重新渲染扇形所需的参数，将是否高亮设置为 false。\n            isSelected = option.series[hoveredIndex].pieStatus.selected;\n            isHovered = false;\n            startRatio = option.series[hoveredIndex].pieData.startRatio;\n            endRatio = option.series[hoveredIndex].pieData.endRatio;\n            k = option.series[hoveredIndex].pieStatus.k;\n            i = option.series[hoveredIndex].pieData.value === option.series[0].pieData.value ? 35 : 10;\n            // 对当前点击的扇形，执行取消高亮操作（对 option 更新）\n            option.series[hoveredIndex].parametricEquation = getParametricEquation(startRatio, endRatio, isSelected, isHovered, k, i);\n            option.series[hoveredIndex].pieStatus.hovered = isHovered;\n\n            // 将此前记录的上次选中的扇形对应的系列号 seriesIndex 清空\n            hoveredIndex = \"\";\n          }\n\n          // 如果触发 mouseover 的扇形不是透明圆环，将其高亮（对 option 更新）\n          if (params.seriesName !== \"mouseoutSeries\" && option.series[params.seriesIndex].pieStatus) {\n            // 从 option.series 中读取重新渲染扇形所需的参数，将是否高亮设置为 true。\n            isSelected = option.series[params.seriesIndex].pieStatus.selected;\n            isHovered = true;\n            startRatio = option.series[params.seriesIndex].pieData.startRatio;\n            endRatio = option.series[params.seriesIndex].pieData.endRatio;\n            k = option.series[params.seriesIndex].pieStatus.k;\n\n            // 对当前点击的扇形，执行高亮操作（对 option 更新）\n            option.series[params.seriesIndex].parametricEquation = getParametricEquation(startRatio, endRatio, isSelected, isHovered, k, option.series[params.seriesIndex].pieData.value + 5);\n            option.series[params.seriesIndex].pieStatus.hovered = isHovered;\n\n            // 记录上次高亮的扇形对应的系列号 seriesIndex\n            hoveredIndex = params.seriesIndex;\n          }\n\n          // 使用更新后的 option，渲染图表\n          myChart.setOption(option);\n        }\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}