{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"D:/Lowcode/vue-low-code/node_modules/@babel/runtime/helpers/interopRequireWildcard.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nrequire(\"core-js/modules/es.array.push.js\");\nvar echarts = _interopRequireWildcard(require(\"echarts\"));\nrequire(\"echarts/src/chart/pie\");\nrequire(\"echarts-gl\");\nvar _default = {\n  data() {\n    return {\n      optionData: [{\n        name: \"通过\",\n        value: 50,\n        itemStyle: {\n          opacity: 1,\n          color: \"#4d7dd2\"\n        }\n      }, {\n        name: \"不通过\",\n        value: 25,\n        itemStyle: {\n          opacity: 1,\n          color: \"#fd8839\"\n        }\n      }, {\n        name: \"取消/延迟\",\n        value: 25,\n        itemStyle: {\n          opacity: 1,\n          color: \"#b2b2b2\"\n        }\n      }]\n    };\n  },\n  mounted() {\n    this.echartsPie();\n  },\n  methods: {\n    echartsPie() {\n      let hoveredIndex = \"\";\n      // let chartDom = this.$refs[\"basicDataPie\"];\n      let myChart = echarts.init(document.getElementById(\"mainTwo\"));\n      const getPie3D = (pieData, internalDiameterRatio) => {\n        //internalDiameterRatio:透明的空心占比\n        let series = [];\n        let sumValue = 0;\n        let startValue = 0;\n        let endValue = 0;\n        let k = 1;\n        pieData.sort((a, b) => {\n          return b.value - a.value;\n        });\n        // 为每一个饼图数据，生成一个 series-surface 配置\n        for (let i = 0; i < pieData.length; i++) {\n          sumValue += pieData[i].value;\n          let seriesItem = {\n            name: typeof pieData[i].name === \"undefined\" ? `series${i}` : pieData[i].name,\n            type: \"surface\",\n            parametric: true,\n            wireframe: {\n              show: false\n            },\n            pieData: pieData[i],\n            pieStatus: {\n              selected: false,\n              hovered: false,\n              k: k\n            },\n            radius: \"50%\",\n            center: [\"10%\", \"10%\"]\n          };\n          if (typeof pieData[i].itemStyle != \"undefined\") {\n            let itemStyle = {};\n            typeof pieData[i].itemStyle.color != \"undefined\" ? itemStyle.color = pieData[i].itemStyle.color : null;\n            typeof pieData[i].itemStyle.opacity != \"undefined\" ? itemStyle.opacity = pieData[i].itemStyle.opacity : null;\n            seriesItem.itemStyle = itemStyle;\n          }\n          series.push(seriesItem);\n        }\n\n        // 使用上一次遍历时，计算出的数据和 sumValue，调用 getParametricEquation 函数，\n        // 向每个 series-surface 传入不同的参数方程 series-surface.parametricEquation，也就是实现每一个扇形。\n        for (let i = 0; i < series.length; i++) {\n          endValue = startValue + series[i].pieData.value;\n          series[i].pieData.startRatio = startValue / sumValue;\n          series[i].pieData.endRatio = endValue / sumValue;\n          series[i].parametricEquation = getParametricEquation(series[i].pieData.startRatio, series[i].pieData.endRatio, false, false, k, series[i].pieData.value);\n          startValue = endValue;\n        }\n        let boxHeight = getHeight3D(series, 10); //通过传参设定3d饼/环的高度，26代表26px\n        // 准备待返回的配置项，把准备好的 legendData、series 传入。\n        let option = {\n          backgroundColor: \"#fff\",\n          tooltip: {\n            backgroundColor: \"black\",\n            formatter: params => {\n              if (params.seriesName !== \"mouseoutSeries\" && params.seriesName !== \"pie3d\") {\n                let bfb = ((option.series[params.seriesIndex].pieData.endRatio - option.series[params.seriesIndex].pieData.startRatio) * 100).toFixed(2);\n                return `${params.seriesName}<br/>` + `<span style=\"display:inline-block;margin-right:5px;border-radius:10px;width:10px;height:10px;background-color:${params.color};\"></span>` + `${bfb}%`;\n              }\n            }\n          },\n          legend: {\n            bottom: \"3%\",\n            itemGap: 20,\n            icon: \"path://M0,12L12,12C12,5.37258,6.62742,0,0,0L0,12Z\"\n          },\n          title: {\n            text: \"项目检验进展情况\",\n            left: \"center\",\n            top: \"2%\",\n            textStyle: {\n              fontWeight: 500,\n              fontSize: 16,\n              color: \"#3D3D3D\"\n            }\n          },\n          xAxis3D: {\n            min: -1,\n            max: 1\n          },\n          yAxis3D: {\n            min: -1,\n            max: 1\n          },\n          zAxis3D: {\n            min: -1,\n            max: 1\n          },\n          grid3D: {\n            show: false,\n            boxHeight: boxHeight,\n            top: \"-30\",\n            left: \"10\",\n            bottom: \"60%\",\n            environment: \"auto\",\n            viewControl: {\n              distance: 300,\n              //远近\n              alpha: 25,\n              //饼图X轴旋转\n              beta: -70,\n              //饼图Y轴旋转\n              autoRotate: false //自动旋转\n            }\n          },\n\n          series: series\n        };\n        return option;\n      };\n\n      //获取3d丙图的最高扇区的高度\n      const getHeight3D = (series, height) => {\n        series.sort((a, b) => {\n          return b.pieData.value - a.pieData.value;\n        });\n        return height * 15 / series[0].pieData.value;\n      };\n\n      // 生成扇形的曲面参数方程，用于 series-surface.parametricEquation\n      const getParametricEquation = (startRatio, endRatio, isSelected, isHovered, k, h) => {\n        // 计算\n        let midRatio = (startRatio + endRatio) / 2;\n        let startRadian = startRatio * Math.PI * 2;\n        let endRadian = endRatio * Math.PI * 2;\n        let midRadian = midRatio * Math.PI * 2;\n        // 如果只有一个扇形，则不实现选中效果。\n        if (startRatio === 0 && endRatio === 1) {\n          isSelected = false;\n        }\n        // 通过扇形内径/外径的值，换算出辅助参数 k（默认值 1/3）\n        k = typeof k !== \"undefined\" ? k : 1 / 3;\n        // 计算选中效果分别在 x 轴、y 轴方向上的位移（未选中，则位移均为 0）\n        let offsetX = isSelected ? Math.cos(midRadian) * 0.1 : 0;\n        let offsetY = isSelected ? Math.sin(midRadian) * 0.1 : 0;\n        // 计算高亮效果的放大比例（未高亮，则比例为 1）\n        let hoverRate = isHovered ? 1.05 : 1;\n        // 返回曲面参数方程\n        return {\n          u: {\n            min: -Math.PI,\n            max: Math.PI * 2,\n            step: Math.PI / 32\n          },\n          v: {\n            min: 0,\n            max: Math.PI * 2,\n            step: Math.PI / 80\n          },\n          x: function (u, v) {\n            if (u < startRadian) {\n              return offsetX + Math.cos(startRadian) * (1 + Math.cos(v) * k) * hoverRate;\n            }\n            if (u > endRadian) {\n              return offsetX + Math.cos(endRadian) * (1 + Math.cos(v) * k) * hoverRate;\n            }\n            return offsetX + Math.cos(u) * (1 + Math.cos(v) * k) * hoverRate;\n          },\n          y: function (u, v) {\n            if (u < startRadian) {\n              return offsetY + Math.sin(startRadian) * (1 + Math.cos(v) * k) * hoverRate;\n            }\n            if (u > endRadian) {\n              return offsetY + Math.sin(endRadian) * (1 + Math.cos(v) * k) * hoverRate;\n            }\n            return offsetY + Math.sin(u) * (1 + Math.cos(v) * k) * hoverRate;\n          },\n          z: function (u, v) {\n            if (u < -Math.PI * 0.5) {\n              return Math.sin(u);\n            }\n            if (u > Math.PI * 2.5) {\n              return Math.sin(u) * h * 0.1;\n            }\n            return Math.sin(v) > 0 ? 1 * h * 0.1 : -1;\n          }\n        };\n      };\n      let option = getPie3D(this.optionData, 0.8);\n      //是否需要label指引线，如果要就添加一个透明的2d饼状图并调整角度使得labelLine和3d的饼状图对齐，并再次setOption\n      option.series.push({\n        // name: \"pie3d\",\n        type: \"pie\",\n        label: {\n          color: \"black\",\n          fontSize: 16,\n          //  position: 'inner',\n          // formatter: \"{b}\\n\\n\",\n          // padding: [0, -40],\n          formatter: item => {\n            //  console.log(item)\n            return item.data.name + \":\" + item.data.value + \"\";\n          }\n        },\n        labelLine: {\n          showAbove: false,\n          length: 20,\n          // 视觉引导线第一段的长度\n          length2: 40,\n          // 视觉引导项第二段的长度\n          lineStyle: {\n            color: \"#686868\",\n            // 改变标示线的颜色\n            width: 1,\n            type: \"solid\" // 线的类型\n          }\n        },\n\n        data: this.optionData,\n        // startAngle: -25, //起始角度，支持范围[0, 360]。\n        clockwise: false,\n        //饼图的扇区是否是顺时针排布。上述这两项配置主要是为了对齐3d的样式\n        radius: [\"65%\", \"65%\"],\n        center: [\"55%\", \"48%\"],\n        //指示线的位置\n        itemStyle: {\n          opacity: 0\n        }\n      });\n      option && myChart.setOption(option);\n      myChart.on(\"mouseover\", function (params) {\n        // 准备重新渲染扇形所需的参数\n        let isSelected;\n        let isHovered;\n        let startRatio;\n        let endRatio;\n        let k;\n        let i;\n\n        // 如果触发 mouseover 的扇形当前已高亮，则不做操作\n        if (hoveredIndex === params.seriesIndex) {\n          return;\n\n          // 否则进行高亮及必要的取消高亮操作\n        } else {\n          // 如果当前有高亮的扇形，取消其高亮状态（对 option 更新）\n          if (hoveredIndex !== \"\") {\n            // 从 option.series 中读取重新渲染扇形所需的参数，将是否高亮设置为 false。\n            isSelected = option.series[hoveredIndex].pieStatus.selected;\n            isHovered = false;\n            startRatio = option.series[hoveredIndex].pieData.startRatio;\n            endRatio = option.series[hoveredIndex].pieData.endRatio;\n            k = option.series[hoveredIndex].pieStatus.k;\n            i = option.series[hoveredIndex].pieData.value === option.series[0].pieData.value ? 35 : 10;\n            // 对当前点击的扇形，执行取消高亮操作（对 option 更新）\n            option.series[hoveredIndex].parametricEquation = getParametricEquation(startRatio, endRatio, isSelected, isHovered, k, i);\n            option.series[hoveredIndex].pieStatus.hovered = isHovered;\n\n            // 将此前记录的上次选中的扇形对应的系列号 seriesIndex 清空\n            hoveredIndex = \"\";\n          }\n\n          // 如果触发 mouseover 的扇形不是透明圆环，将其高亮（对 option 更新）\n          if (params.seriesName !== \"mouseoutSeries\" && option.series[params.seriesIndex].pieStatus) {\n            // 从 option.series 中读取重新渲染扇形所需的参数，将是否高亮设置为 true。\n            isSelected = option.series[params.seriesIndex].pieStatus.selected;\n            isHovered = true;\n            startRatio = option.series[params.seriesIndex].pieData.startRatio;\n            endRatio = option.series[params.seriesIndex].pieData.endRatio;\n            k = option.series[params.seriesIndex].pieStatus.k;\n\n            // 对当前点击的扇形，执行高亮操作（对 option 更新）\n            option.series[params.seriesIndex].parametricEquation = getParametricEquation(startRatio, endRatio, isSelected, isHovered, k, option.series[params.seriesIndex].pieData.value + 5);\n            option.series[params.seriesIndex].pieStatus.hovered = isHovered;\n\n            // 记录上次高亮的扇形对应的系列号 seriesIndex\n            hoveredIndex = params.seriesIndex;\n          }\n\n          // 使用更新后的 option，渲染图表\n          myChart.setOption(option);\n        }\n      });\n    }\n  }\n};\nexports.default = _default;","map":{"version":3,"names":["echarts","_interopRequireWildcard","require","_default","data","optionData","name","value","itemStyle","opacity","color","mounted","echartsPie","methods","hoveredIndex","myChart","init","document","getElementById","getPie3D","pieData","internalDiameterRatio","series","sumValue","startValue","endValue","k","sort","a","b","i","length","seriesItem","type","parametric","wireframe","show","pieStatus","selected","hovered","radius","center","push","startRatio","endRatio","parametricEquation","getParametricEquation","boxHeight","getHeight3D","option","backgroundColor","tooltip","formatter","params","seriesName","bfb","seriesIndex","toFixed","legend","bottom","itemGap","icon","title","text","left","top","textStyle","fontWeight","fontSize","xAxis3D","min","max","yAxis3D","zAxis3D","grid3D","environment","viewControl","distance","alpha","beta","autoRotate","height","isSelected","isHovered","h","midRatio","startRadian","Math","PI","endRadian","midRadian","offsetX","cos","offsetY","sin","hoverRate","u","step","v","x","y","z","label","item","labelLine","showAbove","length2","lineStyle","width","clockwise","setOption","on","exports","default"],"sources":["src/views/subpages/echarts/echarts3d.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"echarts_box\" id=\"mainTwo\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as echarts from \"echarts\";\r\nimport \"echarts/src/chart/pie\";\r\nimport \"echarts-gl\";\r\nexport default {\r\n    data() {\r\n        return {\r\n            optionData: [\r\n        {\r\n          name: \"通过\",\r\n          value: 50,\r\n          itemStyle: {\r\n            opacity: 1,\r\n            color: \"#4d7dd2\",\r\n          },\r\n        },\r\n        {\r\n          name: \"不通过\",\r\n          value: 25,\r\n          itemStyle: {\r\n            opacity: 1,\r\n            color: \"#fd8839\",\r\n          },\r\n        },\r\n        {\r\n          name: \"取消/延迟\",\r\n          value: 25,\r\n          itemStyle: {\r\n            opacity: 1,\r\n            color: \"#b2b2b2\",\r\n          },\r\n        },\r\n      ],\r\n        };\r\n    },\r\n    mounted(){\r\n        this.echartsPie()\r\n    },\r\n   methods:{\r\n    echartsPie() {\r\n      let hoveredIndex = \"\";\r\n      // let chartDom = this.$refs[\"basicDataPie\"];\r\n      let myChart = echarts.init(document.getElementById(\"mainTwo\"));\r\n      const getPie3D = (pieData, internalDiameterRatio) => {\r\n        //internalDiameterRatio:透明的空心占比\r\n        let series = [];\r\n        let sumValue = 0;\r\n        let startValue = 0;\r\n        let endValue = 0;\r\n        let k = 1;\r\n        pieData.sort((a, b) => {\r\n          return b.value - a.value;\r\n        });\r\n        // 为每一个饼图数据，生成一个 series-surface 配置\r\n        for (let i = 0; i < pieData.length; i++) {\r\n          sumValue += pieData[i].value;\r\n          let seriesItem = {\r\n            name:\r\n              typeof pieData[i].name === \"undefined\"\r\n                ? `series${i}`\r\n                : pieData[i].name,\r\n            type: \"surface\",\r\n            parametric: true,\r\n            wireframe: {\r\n              show: false,\r\n            },\r\n            pieData: pieData[i],\r\n            pieStatus: {\r\n              selected: false,\r\n              hovered: false,\r\n              k: k,\r\n            },\r\n            radius: \"50%\",\r\n            center: [\"10%\", \"10%\"],\r\n          };\r\n\r\n          if (typeof pieData[i].itemStyle != \"undefined\") {\r\n            let itemStyle = {};\r\n            typeof pieData[i].itemStyle.color != \"undefined\"\r\n              ? (itemStyle.color = pieData[i].itemStyle.color)\r\n              : null;\r\n            typeof pieData[i].itemStyle.opacity != \"undefined\"\r\n              ? (itemStyle.opacity = pieData[i].itemStyle.opacity)\r\n              : null;\r\n            seriesItem.itemStyle = itemStyle;\r\n          }\r\n          series.push(seriesItem);\r\n        }\r\n\r\n        // 使用上一次遍历时，计算出的数据和 sumValue，调用 getParametricEquation 函数，\r\n        // 向每个 series-surface 传入不同的参数方程 series-surface.parametricEquation，也就是实现每一个扇形。\r\n        for (let i = 0; i < series.length; i++) {\r\n          endValue = startValue + series[i].pieData.value;\r\n          series[i].pieData.startRatio = startValue / sumValue;\r\n          series[i].pieData.endRatio = endValue / sumValue;\r\n          series[i].parametricEquation = getParametricEquation(\r\n            series[i].pieData.startRatio,\r\n            series[i].pieData.endRatio,\r\n            false,\r\n            false,\r\n            k,\r\n            series[i].pieData.value\r\n          );\r\n          startValue = endValue;\r\n        }\r\n        let boxHeight = getHeight3D(series, 10); //通过传参设定3d饼/环的高度，26代表26px\r\n        // 准备待返回的配置项，把准备好的 legendData、series 传入。\r\n        let option = {\r\n          backgroundColor: \"#fff\",\r\n          tooltip: {\r\n            backgroundColor: \"black\",\r\n            formatter: (params) => {\r\n              if (\r\n                params.seriesName !== \"mouseoutSeries\" &&\r\n                params.seriesName !== \"pie3d\"\r\n              ) {\r\n                let bfb = (\r\n                  (option.series[params.seriesIndex].pieData.endRatio -\r\n                    option.series[params.seriesIndex].pieData.startRatio) *\r\n                  100\r\n                ).toFixed(2);\r\n                return (\r\n                  `${params.seriesName}<br/>` +\r\n                  `<span style=\"display:inline-block;margin-right:5px;border-radius:10px;width:10px;height:10px;background-color:${params.color};\"></span>` +\r\n                  `${bfb}%`\r\n                );\r\n              }\r\n            },\r\n          },\r\n          legend: {\r\n            bottom: \"3%\",\r\n            itemGap: 20,\r\n            icon: \"path://M0,12L12,12C12,5.37258,6.62742,0,0,0L0,12Z\",\r\n          },\r\n          title: {\r\n            text: \"项目检验进展情况\",\r\n            left: \"center\",\r\n            top: \"2%\",\r\n            textStyle: {\r\n              fontWeight: 500,\r\n              fontSize: 16,\r\n              color: \"#3D3D3D\",\r\n            },\r\n          },\r\n          xAxis3D: {\r\n            min: -1,\r\n            max: 1,\r\n          },\r\n          yAxis3D: {\r\n            min: -1,\r\n            max: 1,\r\n          },\r\n          zAxis3D: {\r\n            min: -1,\r\n            max: 1,\r\n          },\r\n          grid3D: {\r\n            show: false,\r\n            boxHeight: boxHeight,\r\n            top: \"-30\",\r\n            left: \"10\",\r\n            bottom: \"60%\",\r\n            environment: \"auto\",\r\n            viewControl: {\r\n              distance: 300, //远近\r\n              alpha: 25, //饼图X轴旋转\r\n              beta: -70, //饼图Y轴旋转\r\n              autoRotate: false, //自动旋转\r\n            },\r\n          },\r\n          series: series,\r\n        };\r\n        return option;\r\n      };\r\n\r\n      //获取3d丙图的最高扇区的高度\r\n      const getHeight3D = (series, height) => {\r\n        series.sort((a, b) => {\r\n          return b.pieData.value - a.pieData.value;\r\n        });\r\n        return (height * 15) / series[0].pieData.value;\r\n      };\r\n\r\n      // 生成扇形的曲面参数方程，用于 series-surface.parametricEquation\r\n      const getParametricEquation = (\r\n        startRatio,\r\n        endRatio,\r\n        isSelected,\r\n        isHovered,\r\n        k,\r\n        h\r\n      ) => {\r\n        // 计算\r\n        let midRatio = (startRatio + endRatio) / 2;\r\n        let startRadian = startRatio * Math.PI * 2;\r\n        let endRadian = endRatio * Math.PI * 2;\r\n        let midRadian = midRatio * Math.PI * 2;\r\n        // 如果只有一个扇形，则不实现选中效果。\r\n        if (startRatio === 0 && endRatio === 1) {\r\n          isSelected = false;\r\n        }\r\n        // 通过扇形内径/外径的值，换算出辅助参数 k（默认值 1/3）\r\n        k = typeof k !== \"undefined\" ? k : 1 / 3;\r\n        // 计算选中效果分别在 x 轴、y 轴方向上的位移（未选中，则位移均为 0）\r\n        let offsetX = isSelected ? Math.cos(midRadian) * 0.1 : 0;\r\n        let offsetY = isSelected ? Math.sin(midRadian) * 0.1 : 0;\r\n        // 计算高亮效果的放大比例（未高亮，则比例为 1）\r\n        let hoverRate = isHovered ? 1.05 : 1;\r\n        // 返回曲面参数方程\r\n        return {\r\n          u: {\r\n            min: -Math.PI,\r\n            max: Math.PI * 2,\r\n            step: Math.PI / 32,\r\n          },\r\n          v: {\r\n            min: 0,\r\n            max: Math.PI * 2,\r\n            step: Math.PI / 80,\r\n          },\r\n          x: function (u, v) {\r\n            if (u < startRadian) {\r\n              return (\r\n                offsetX +\r\n                Math.cos(startRadian) * (1 + Math.cos(v) * k) * hoverRate\r\n              );\r\n            }\r\n            if (u > endRadian) {\r\n              return (\r\n                offsetX +\r\n                Math.cos(endRadian) * (1 + Math.cos(v) * k) * hoverRate\r\n              );\r\n            }\r\n            return offsetX + Math.cos(u) * (1 + Math.cos(v) * k) * hoverRate;\r\n          },\r\n          y: function (u, v) {\r\n            if (u < startRadian) {\r\n              return (\r\n                offsetY +\r\n                Math.sin(startRadian) * (1 + Math.cos(v) * k) * hoverRate\r\n              );\r\n            }\r\n            if (u > endRadian) {\r\n              return (\r\n                offsetY +\r\n                Math.sin(endRadian) * (1 + Math.cos(v) * k) * hoverRate\r\n              );\r\n            }\r\n            return offsetY + Math.sin(u) * (1 + Math.cos(v) * k) * hoverRate;\r\n          },\r\n          z: function (u, v) {\r\n            if (u < -Math.PI * 0.5) {\r\n              return Math.sin(u);\r\n            }\r\n            if (u > Math.PI * 2.5) {\r\n              return Math.sin(u) * h * 0.1;\r\n            }\r\n            return Math.sin(v) > 0 ? 1 * h * 0.1 : -1;\r\n          },\r\n        };\r\n      };\r\n\r\n      let option = getPie3D(this.optionData, 0.8);\r\n      //是否需要label指引线，如果要就添加一个透明的2d饼状图并调整角度使得labelLine和3d的饼状图对齐，并再次setOption\r\n      option.series.push({\r\n        // name: \"pie3d\",\r\n        type: \"pie\",\r\n        label: {\r\n          color: \"black\",\r\n          fontSize: 16,\r\n          //  position: 'inner',\r\n          // formatter: \"{b}\\n\\n\",\r\n          // padding: [0, -40],\r\n          formatter: (item) => {\r\n            //  console.log(item)\r\n            return item.data.name + \":\" + item.data.value + \"\";\r\n          },\r\n        },\r\n        labelLine: {\r\n          showAbove: false,\r\n          length: 20, // 视觉引导线第一段的长度\r\n          length2: 40, // 视觉引导项第二段的长度\r\n          lineStyle: {\r\n            color: \"#686868\", // 改变标示线的颜色\r\n            width: 1,\r\n            type: \"solid\", // 线的类型\r\n          },\r\n        },\r\n        data: this.optionData,\r\n        // startAngle: -25, //起始角度，支持范围[0, 360]。\r\n        clockwise: false, //饼图的扇区是否是顺时针排布。上述这两项配置主要是为了对齐3d的样式\r\n        radius: [\"65%\", \"65%\"],\r\n        center: [\"55%\", \"48%\"], //指示线的位置\r\n        itemStyle: {\r\n          opacity: 0,\r\n        },\r\n      });\r\n      option && myChart.setOption(option);\r\n\r\n      myChart.on(\"mouseover\", function (params) {\r\n        // 准备重新渲染扇形所需的参数\r\n        let isSelected;\r\n        let isHovered;\r\n        let startRatio;\r\n        let endRatio;\r\n        let k;\r\n        let i;\r\n\r\n        // 如果触发 mouseover 的扇形当前已高亮，则不做操作\r\n        if (hoveredIndex === params.seriesIndex) {\r\n          return;\r\n\r\n          // 否则进行高亮及必要的取消高亮操作\r\n        } else {\r\n          // 如果当前有高亮的扇形，取消其高亮状态（对 option 更新）\r\n          if (hoveredIndex !== \"\") {\r\n            // 从 option.series 中读取重新渲染扇形所需的参数，将是否高亮设置为 false。\r\n            isSelected = option.series[hoveredIndex].pieStatus.selected;\r\n            isHovered = false;\r\n            startRatio = option.series[hoveredIndex].pieData.startRatio;\r\n            endRatio = option.series[hoveredIndex].pieData.endRatio;\r\n            k = option.series[hoveredIndex].pieStatus.k;\r\n            i =\r\n              option.series[hoveredIndex].pieData.value ===\r\n              option.series[0].pieData.value\r\n                ? 35\r\n                : 10;\r\n            // 对当前点击的扇形，执行取消高亮操作（对 option 更新）\r\n            option.series[hoveredIndex].parametricEquation =\r\n              getParametricEquation(\r\n                startRatio,\r\n                endRatio,\r\n                isSelected,\r\n                isHovered,\r\n                k,\r\n                i\r\n              );\r\n            option.series[hoveredIndex].pieStatus.hovered = isHovered;\r\n\r\n            // 将此前记录的上次选中的扇形对应的系列号 seriesIndex 清空\r\n            hoveredIndex = \"\";\r\n          }\r\n\r\n          // 如果触发 mouseover 的扇形不是透明圆环，将其高亮（对 option 更新）\r\n          if (\r\n            params.seriesName !== \"mouseoutSeries\" &&\r\n            option.series[params.seriesIndex].pieStatus\r\n          ) {\r\n            // 从 option.series 中读取重新渲染扇形所需的参数，将是否高亮设置为 true。\r\n            isSelected = option.series[params.seriesIndex].pieStatus.selected;\r\n            isHovered = true;\r\n            startRatio = option.series[params.seriesIndex].pieData.startRatio;\r\n            endRatio = option.series[params.seriesIndex].pieData.endRatio;\r\n            k = option.series[params.seriesIndex].pieStatus.k;\r\n\r\n            // 对当前点击的扇形，执行高亮操作（对 option 更新）\r\n            option.series[params.seriesIndex].parametricEquation =\r\n              getParametricEquation(\r\n                startRatio,\r\n                endRatio,\r\n                isSelected,\r\n                isHovered,\r\n                k,\r\n                option.series[params.seriesIndex].pieData.value + 5\r\n              );\r\n            option.series[params.seriesIndex].pieStatus.hovered = isHovered;\r\n\r\n            // 记录上次高亮的扇形对应的系列号 seriesIndex\r\n            hoveredIndex = params.seriesIndex;\r\n          }\r\n\r\n          // 使用更新后的 option，渲染图表\r\n          myChart.setOption(option);\r\n        }\r\n      });\r\n    },\r\n   },\r\n\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.echarts_box{\r\n    width: 500px;\r\n    height: 500px;\r\n}\r\n</style>"],"mappings":";;;;;;;;AAOA,IAAAA,OAAA,GAAAC,uBAAA,CAAAC,OAAA;AACAA,OAAA;AACAA,OAAA;AAAA,IAAAC,QAAA,GACA;EACAC,KAAA;IACA;MACAC,UAAA,GACA;QACAC,IAAA;QACAC,KAAA;QACAC,SAAA;UACAC,OAAA;UACAC,KAAA;QACA;MACA,GACA;QACAJ,IAAA;QACAC,KAAA;QACAC,SAAA;UACAC,OAAA;UACAC,KAAA;QACA;MACA,GACA;QACAJ,IAAA;QACAC,KAAA;QACAC,SAAA;UACAC,OAAA;UACAC,KAAA;QACA;MACA;IAEA;EACA;EACAC,QAAA;IACA,KAAAC,UAAA;EACA;EACAC,OAAA;IACAD,WAAA;MACA,IAAAE,YAAA;MACA;MACA,IAAAC,OAAA,GAAAf,OAAA,CAAAgB,IAAA,CAAAC,QAAA,CAAAC,cAAA;MACA,MAAAC,QAAA,GAAAA,CAAAC,OAAA,EAAAC,qBAAA;QACA;QACA,IAAAC,MAAA;QACA,IAAAC,QAAA;QACA,IAAAC,UAAA;QACA,IAAAC,QAAA;QACA,IAAAC,CAAA;QACAN,OAAA,CAAAO,IAAA,EAAAC,CAAA,EAAAC,CAAA;UACA,OAAAA,CAAA,CAAAtB,KAAA,GAAAqB,CAAA,CAAArB,KAAA;QACA;QACA;QACA,SAAAuB,CAAA,MAAAA,CAAA,GAAAV,OAAA,CAAAW,MAAA,EAAAD,CAAA;UACAP,QAAA,IAAAH,OAAA,CAAAU,CAAA,EAAAvB,KAAA;UACA,IAAAyB,UAAA;YACA1B,IAAA,EACA,OAAAc,OAAA,CAAAU,CAAA,EAAAxB,IAAA,mBACA,SAAAwB,CAAA,KACAV,OAAA,CAAAU,CAAA,EAAAxB,IAAA;YACA2B,IAAA;YACAC,UAAA;YACAC,SAAA;cACAC,IAAA;YACA;YACAhB,OAAA,EAAAA,OAAA,CAAAU,CAAA;YACAO,SAAA;cACAC,QAAA;cACAC,OAAA;cACAb,CAAA,EAAAA;YACA;YACAc,MAAA;YACAC,MAAA;UACA;UAEA,WAAArB,OAAA,CAAAU,CAAA,EAAAtB,SAAA;YACA,IAAAA,SAAA;YACA,OAAAY,OAAA,CAAAU,CAAA,EAAAtB,SAAA,CAAAE,KAAA,kBACAF,SAAA,CAAAE,KAAA,GAAAU,OAAA,CAAAU,CAAA,EAAAtB,SAAA,CAAAE,KAAA,GACA;YACA,OAAAU,OAAA,CAAAU,CAAA,EAAAtB,SAAA,CAAAC,OAAA,kBACAD,SAAA,CAAAC,OAAA,GAAAW,OAAA,CAAAU,CAAA,EAAAtB,SAAA,CAAAC,OAAA,GACA;YACAuB,UAAA,CAAAxB,SAAA,GAAAA,SAAA;UACA;UACAc,MAAA,CAAAoB,IAAA,CAAAV,UAAA;QACA;;QAEA;QACA;QACA,SAAAF,CAAA,MAAAA,CAAA,GAAAR,MAAA,CAAAS,MAAA,EAAAD,CAAA;UACAL,QAAA,GAAAD,UAAA,GAAAF,MAAA,CAAAQ,CAAA,EAAAV,OAAA,CAAAb,KAAA;UACAe,MAAA,CAAAQ,CAAA,EAAAV,OAAA,CAAAuB,UAAA,GAAAnB,UAAA,GAAAD,QAAA;UACAD,MAAA,CAAAQ,CAAA,EAAAV,OAAA,CAAAwB,QAAA,GAAAnB,QAAA,GAAAF,QAAA;UACAD,MAAA,CAAAQ,CAAA,EAAAe,kBAAA,GAAAC,qBAAA,CACAxB,MAAA,CAAAQ,CAAA,EAAAV,OAAA,CAAAuB,UAAA,EACArB,MAAA,CAAAQ,CAAA,EAAAV,OAAA,CAAAwB,QAAA,EACA,OACA,OACAlB,CAAA,EACAJ,MAAA,CAAAQ,CAAA,EAAAV,OAAA,CAAAb,KACA;UACAiB,UAAA,GAAAC,QAAA;QACA;QACA,IAAAsB,SAAA,GAAAC,WAAA,CAAA1B,MAAA;QACA;QACA,IAAA2B,MAAA;UACAC,eAAA;UACAC,OAAA;YACAD,eAAA;YACAE,SAAA,EAAAC,MAAA;cACA,IACAA,MAAA,CAAAC,UAAA,yBACAD,MAAA,CAAAC,UAAA,cACA;gBACA,IAAAC,GAAA,IACA,CAAAN,MAAA,CAAA3B,MAAA,CAAA+B,MAAA,CAAAG,WAAA,EAAApC,OAAA,CAAAwB,QAAA,GACAK,MAAA,CAAA3B,MAAA,CAAA+B,MAAA,CAAAG,WAAA,EAAApC,OAAA,CAAAuB,UAAA,IACA,KACAc,OAAA;gBACA,OACA,GAAAJ,MAAA,CAAAC,UAAA,UACA,iHAAAD,MAAA,CAAA3C,KAAA,eACA,GAAA6C,GAAA;cAEA;YACA;UACA;UACAG,MAAA;YACAC,MAAA;YACAC,OAAA;YACAC,IAAA;UACA;UACAC,KAAA;YACAC,IAAA;YACAC,IAAA;YACAC,GAAA;YACAC,SAAA;cACAC,UAAA;cACAC,QAAA;cACA1D,KAAA;YACA;UACA;UACA2D,OAAA;YACAC,GAAA;YACAC,GAAA;UACA;UACAC,OAAA;YACAF,GAAA;YACAC,GAAA;UACA;UACAE,OAAA;YACAH,GAAA;YACAC,GAAA;UACA;UACAG,MAAA;YACAtC,IAAA;YACAW,SAAA,EAAAA,SAAA;YACAkB,GAAA;YACAD,IAAA;YACAL,MAAA;YACAgB,WAAA;YACAC,WAAA;cACAC,QAAA;cAAA;cACAC,KAAA;cAAA;cACAC,IAAA;cAAA;cACAC,UAAA;YACA;UACA;;UACA1D,MAAA,EAAAA;QACA;QACA,OAAA2B,MAAA;MACA;;MAEA;MACA,MAAAD,WAAA,GAAAA,CAAA1B,MAAA,EAAA2D,MAAA;QACA3D,MAAA,CAAAK,IAAA,EAAAC,CAAA,EAAAC,CAAA;UACA,OAAAA,CAAA,CAAAT,OAAA,CAAAb,KAAA,GAAAqB,CAAA,CAAAR,OAAA,CAAAb,KAAA;QACA;QACA,OAAA0E,MAAA,QAAA3D,MAAA,IAAAF,OAAA,CAAAb,KAAA;MACA;;MAEA;MACA,MAAAuC,qBAAA,GAAAA,CACAH,UAAA,EACAC,QAAA,EACAsC,UAAA,EACAC,SAAA,EACAzD,CAAA,EACA0D,CAAA,KACA;QACA;QACA,IAAAC,QAAA,IAAA1C,UAAA,GAAAC,QAAA;QACA,IAAA0C,WAAA,GAAA3C,UAAA,GAAA4C,IAAA,CAAAC,EAAA;QACA,IAAAC,SAAA,GAAA7C,QAAA,GAAA2C,IAAA,CAAAC,EAAA;QACA,IAAAE,SAAA,GAAAL,QAAA,GAAAE,IAAA,CAAAC,EAAA;QACA;QACA,IAAA7C,UAAA,UAAAC,QAAA;UACAsC,UAAA;QACA;QACA;QACAxD,CAAA,UAAAA,CAAA,mBAAAA,CAAA;QACA;QACA,IAAAiE,OAAA,GAAAT,UAAA,GAAAK,IAAA,CAAAK,GAAA,CAAAF,SAAA;QACA,IAAAG,OAAA,GAAAX,UAAA,GAAAK,IAAA,CAAAO,GAAA,CAAAJ,SAAA;QACA;QACA,IAAAK,SAAA,GAAAZ,SAAA;QACA;QACA;UACAa,CAAA;YACA1B,GAAA,GAAAiB,IAAA,CAAAC,EAAA;YACAjB,GAAA,EAAAgB,IAAA,CAAAC,EAAA;YACAS,IAAA,EAAAV,IAAA,CAAAC,EAAA;UACA;UACAU,CAAA;YACA5B,GAAA;YACAC,GAAA,EAAAgB,IAAA,CAAAC,EAAA;YACAS,IAAA,EAAAV,IAAA,CAAAC,EAAA;UACA;UACAW,CAAA,WAAAA,CAAAH,CAAA,EAAAE,CAAA;YACA,IAAAF,CAAA,GAAAV,WAAA;cACA,OACAK,OAAA,GACAJ,IAAA,CAAAK,GAAA,CAAAN,WAAA,SAAAC,IAAA,CAAAK,GAAA,CAAAM,CAAA,IAAAxE,CAAA,IAAAqE,SAAA;YAEA;YACA,IAAAC,CAAA,GAAAP,SAAA;cACA,OACAE,OAAA,GACAJ,IAAA,CAAAK,GAAA,CAAAH,SAAA,SAAAF,IAAA,CAAAK,GAAA,CAAAM,CAAA,IAAAxE,CAAA,IAAAqE,SAAA;YAEA;YACA,OAAAJ,OAAA,GAAAJ,IAAA,CAAAK,GAAA,CAAAI,CAAA,SAAAT,IAAA,CAAAK,GAAA,CAAAM,CAAA,IAAAxE,CAAA,IAAAqE,SAAA;UACA;UACAK,CAAA,WAAAA,CAAAJ,CAAA,EAAAE,CAAA;YACA,IAAAF,CAAA,GAAAV,WAAA;cACA,OACAO,OAAA,GACAN,IAAA,CAAAO,GAAA,CAAAR,WAAA,SAAAC,IAAA,CAAAK,GAAA,CAAAM,CAAA,IAAAxE,CAAA,IAAAqE,SAAA;YAEA;YACA,IAAAC,CAAA,GAAAP,SAAA;cACA,OACAI,OAAA,GACAN,IAAA,CAAAO,GAAA,CAAAL,SAAA,SAAAF,IAAA,CAAAK,GAAA,CAAAM,CAAA,IAAAxE,CAAA,IAAAqE,SAAA;YAEA;YACA,OAAAF,OAAA,GAAAN,IAAA,CAAAO,GAAA,CAAAE,CAAA,SAAAT,IAAA,CAAAK,GAAA,CAAAM,CAAA,IAAAxE,CAAA,IAAAqE,SAAA;UACA;UACAM,CAAA,WAAAA,CAAAL,CAAA,EAAAE,CAAA;YACA,IAAAF,CAAA,IAAAT,IAAA,CAAAC,EAAA;cACA,OAAAD,IAAA,CAAAO,GAAA,CAAAE,CAAA;YACA;YACA,IAAAA,CAAA,GAAAT,IAAA,CAAAC,EAAA;cACA,OAAAD,IAAA,CAAAO,GAAA,CAAAE,CAAA,IAAAZ,CAAA;YACA;YACA,OAAAG,IAAA,CAAAO,GAAA,CAAAI,CAAA,YAAAd,CAAA;UACA;QACA;MACA;MAEA,IAAAnC,MAAA,GAAA9B,QAAA,MAAAd,UAAA;MACA;MACA4C,MAAA,CAAA3B,MAAA,CAAAoB,IAAA;QACA;QACAT,IAAA;QACAqE,KAAA;UACA5F,KAAA;UACA0D,QAAA;UACA;UACA;UACA;UACAhB,SAAA,EAAAmD,IAAA;YACA;YACA,OAAAA,IAAA,CAAAnG,IAAA,CAAAE,IAAA,SAAAiG,IAAA,CAAAnG,IAAA,CAAAG,KAAA;UACA;QACA;QACAiG,SAAA;UACAC,SAAA;UACA1E,MAAA;UAAA;UACA2E,OAAA;UAAA;UACAC,SAAA;YACAjG,KAAA;YAAA;YACAkG,KAAA;YACA3E,IAAA;UACA;QACA;;QACA7B,IAAA,OAAAC,UAAA;QACA;QACAwG,SAAA;QAAA;QACArE,MAAA;QACAC,MAAA;QAAA;QACAjC,SAAA;UACAC,OAAA;QACA;MACA;MACAwC,MAAA,IAAAlC,OAAA,CAAA+F,SAAA,CAAA7D,MAAA;MAEAlC,OAAA,CAAAgG,EAAA,wBAAA1D,MAAA;QACA;QACA,IAAA6B,UAAA;QACA,IAAAC,SAAA;QACA,IAAAxC,UAAA;QACA,IAAAC,QAAA;QACA,IAAAlB,CAAA;QACA,IAAAI,CAAA;;QAEA;QACA,IAAAhB,YAAA,KAAAuC,MAAA,CAAAG,WAAA;UACA;;UAEA;QACA;UACA;UACA,IAAA1C,YAAA;YACA;YACAoE,UAAA,GAAAjC,MAAA,CAAA3B,MAAA,CAAAR,YAAA,EAAAuB,SAAA,CAAAC,QAAA;YACA6C,SAAA;YACAxC,UAAA,GAAAM,MAAA,CAAA3B,MAAA,CAAAR,YAAA,EAAAM,OAAA,CAAAuB,UAAA;YACAC,QAAA,GAAAK,MAAA,CAAA3B,MAAA,CAAAR,YAAA,EAAAM,OAAA,CAAAwB,QAAA;YACAlB,CAAA,GAAAuB,MAAA,CAAA3B,MAAA,CAAAR,YAAA,EAAAuB,SAAA,CAAAX,CAAA;YACAI,CAAA,GACAmB,MAAA,CAAA3B,MAAA,CAAAR,YAAA,EAAAM,OAAA,CAAAb,KAAA,KACA0C,MAAA,CAAA3B,MAAA,IAAAF,OAAA,CAAAb,KAAA,GACA,KACA;YACA;YACA0C,MAAA,CAAA3B,MAAA,CAAAR,YAAA,EAAA+B,kBAAA,GACAC,qBAAA,CACAH,UAAA,EACAC,QAAA,EACAsC,UAAA,EACAC,SAAA,EACAzD,CAAA,EACAI,CACA;YACAmB,MAAA,CAAA3B,MAAA,CAAAR,YAAA,EAAAuB,SAAA,CAAAE,OAAA,GAAA4C,SAAA;;YAEA;YACArE,YAAA;UACA;;UAEA;UACA,IACAuC,MAAA,CAAAC,UAAA,yBACAL,MAAA,CAAA3B,MAAA,CAAA+B,MAAA,CAAAG,WAAA,EAAAnB,SAAA,EACA;YACA;YACA6C,UAAA,GAAAjC,MAAA,CAAA3B,MAAA,CAAA+B,MAAA,CAAAG,WAAA,EAAAnB,SAAA,CAAAC,QAAA;YACA6C,SAAA;YACAxC,UAAA,GAAAM,MAAA,CAAA3B,MAAA,CAAA+B,MAAA,CAAAG,WAAA,EAAApC,OAAA,CAAAuB,UAAA;YACAC,QAAA,GAAAK,MAAA,CAAA3B,MAAA,CAAA+B,MAAA,CAAAG,WAAA,EAAApC,OAAA,CAAAwB,QAAA;YACAlB,CAAA,GAAAuB,MAAA,CAAA3B,MAAA,CAAA+B,MAAA,CAAAG,WAAA,EAAAnB,SAAA,CAAAX,CAAA;;YAEA;YACAuB,MAAA,CAAA3B,MAAA,CAAA+B,MAAA,CAAAG,WAAA,EAAAX,kBAAA,GACAC,qBAAA,CACAH,UAAA,EACAC,QAAA,EACAsC,UAAA,EACAC,SAAA,EACAzD,CAAA,EACAuB,MAAA,CAAA3B,MAAA,CAAA+B,MAAA,CAAAG,WAAA,EAAApC,OAAA,CAAAb,KAAA,IACA;YACA0C,MAAA,CAAA3B,MAAA,CAAA+B,MAAA,CAAAG,WAAA,EAAAnB,SAAA,CAAAE,OAAA,GAAA4C,SAAA;;YAEA;YACArE,YAAA,GAAAuC,MAAA,CAAAG,WAAA;UACA;;UAEA;UACAzC,OAAA,CAAA+F,SAAA,CAAA7D,MAAA;QACA;MACA;IACA;EACA;AAEA;AAAA+D,OAAA,CAAAC,OAAA,GAAA9G,QAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}