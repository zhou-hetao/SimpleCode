{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport moment from 'moment'; // moment格式化时间\nimport gantt from \"dhtmlx-gantt\"; // 引入模块\nimport \"dhtmlx-gantt/codebase/dhtmlxgantt.css\"; //皮肤\n\nexport default {\n  name: \"gantt\",\n  data() {\n    return {\n      tasks: {\n        data: []\n      }\n    };\n  },\n  mounted() {\n    this.initData();\n    gantt.config.show_progress = false;\n    function percenToString(num) {\n      return Math.floor(num * 100) + \"%\";\n    }\n\n    // 设置每一部分的颜色\n    function renderLabel(progress, type, state) {\n      var relWidth = progress * 100;\n      var cssClass = \"custom_progress \";\n      if (type === 1) {\n        cssClass += \"nearly_done\";\n      } else if (type === 2) {\n        if (state) {\n          cssClass += \"in_progress\";\n        } else {\n          cssClass += \"in_progress_w\";\n        }\n      } else {\n        cssClass += \"idle\";\n      }\n      return \"<div class='\" + cssClass + \"' style='width:\" + relWidth + \"%'>\" + percenToString(progress) + \"</div>\";\n    }\n\n    // 根据定义类型判断颜色顺序\n    gantt.templates.task_text = function (start, end, task) {\n      let colorType = task.colorType;\n      if (colorType === 'j12' || colorType === 'one') {\n        return renderLabel(task.progress1, 1, task.state) + renderLabel(task.progress2, 2, task.state) + renderLabel(task.progress3, 3, task.state);\n      } else if (colorType === 'j21') {\n        return renderLabel(task.progress1, 3, task.state) + renderLabel(task.progress2, 2, task.state) + renderLabel(task.progress3, 1, task.state);\n      } else if (colorType === 'b12') {\n        return renderLabel(task.progress1, 1, task.state) + renderLabel(task.progress2, 2, task.state) + renderLabel(task.progress3, 1, task.state);\n      } else if (colorType === 'b21') {\n        return renderLabel(task.progress1, 3, task.state) + renderLabel(task.progress2, 2, task.state) + renderLabel(task.progress3, 3, task.state);\n      } else if (colorType === 'l12') {\n        return renderLabel(task.progress1, 1, task.state) + renderLabel(task.progress2, 2, task.state) + renderLabel(task.progress3, 3, task.state);\n      } else if (colorType === 'l21') {\n        return renderLabel(task.progress1, 3, task.state) + renderLabel(task.progress2, 2, task.state) + renderLabel(task.progress3, 1, task.state);\n      } else {\n        return renderLabel(task.progress1, 1, task.state) + renderLabel(task.progress2, 2, task.state) + renderLabel(task.progress3, 3, task.state);\n      }\n    };\n    gantt.plugins({\n      marker: true,\n      tooltip: true\n    }); // 开启marker插件 \n    var dateToStr = gantt.date.date_to_str(gantt.config.task_date);\n    var today = new Date();\n    // 添加固定时间线\n    gantt.addMarker({\n      start_date: today,\n      css: 'today',\n      text: '今日:' + moment(new Date()).format('YYYY-MM-DD'),\n      title: 'Today: ' + dateToStr(today)\n    });\n    // 提示框内容\n    gantt.templates.tooltip_text = function (start, end, task) {\n      return \"<b>任务内容:</b>\" + task.text + \"<br/><b>计划开始:</b> \" + task.planStart + \"<br/><b>计划结束:</b> \" + task.planEnd + \"<br/><b>实际开始:</b> \" + task.actualStart + \"<br/><b>实际结束:</b> \" + task.actualEnd;\n    };\n    gantt.config.scale_unit = \"year\";\n    gantt.config.step = 1;\n    gantt.config.date_scale = \"%Y\";\n    //当右侧不止显示年份时，可以添加展示月日，添加一个就加一行\n    gantt.config.subscales = [{\n      unit: \"month\",\n      step: 1,\n      date: \"%m\"\n    }];\n    //甘特图右侧表头的高度\n    gantt.config.scale_height = 80;\n    //使用中文\n    gantt.i18n.setLocale(\"cn\");\n    //自适应甘特图的尺寸大小, 使得在不出现滚动条的情况下, 显示全部任务\n    gantt.config.autosize = true;\n    //只读模式\n    gantt.config.readonly = true;\n    //是否显示左侧树表格\n    gantt.config.show_grid = true;\n    //表格列设置\n    gantt.config.columns = [{\n      name: \"text\",\n      label: \"任务内容\",\n      width: \"120\",\n      align: \"center\"\n    }, {\n      name: \"planStart\",\n      label: \"计划开始\",\n      width: \"100\",\n      align: \"center\"\n    }, {\n      name: \"planEnd\",\n      label: \"计划结束\",\n      width: \"100\",\n      align: \"center\"\n    }, {\n      name: \"actualStart\",\n      label: \"实际开始\",\n      width: \"100\",\n      align: \"center\"\n    }, {\n      name: \"actualEnd\",\n      label: \"实际结束\",\n      width: \"100\",\n      align: \"center\"\n    }];\n    //任务条上的文字大小 以及取消border自带样式\n    gantt.templates.task_class = function () {\n      return \"firstLevelTask\";\n    };\n    // 初始化\n    gantt.init(this.$refs.gantt);\n    // 数据解析\n    gantt.parse(this.tasks);\n  },\n  methods: {\n    initData() {\n      // 处理数据\n      let arr = [{\n        id: '1',\n        task: '12相交',\n        planStart: '2021-09-01',\n        planEnd: '2021-12-01',\n        actualStart: '2021-10-01',\n        actualEnd: '2022-02-01',\n        parent: \"0\"\n      }, {\n        id: '2',\n        task: '21相交',\n        planStart: '2021-10-01',\n        planEnd: '2022-02-01',\n        actualStart: '2021-09-01',\n        actualEnd: '2021-12-01',\n        parent: \"0\"\n      }, {\n        id: '3',\n        task: '1包含2',\n        planStart: '2021-09-01',\n        planEnd: '2022-05-01',\n        actualStart: '2021-12-01',\n        actualEnd: '2022-02-01',\n        parent: \"0\"\n      }, {\n        id: '4',\n        task: '2包含1',\n        planStart: '2021-12-01',\n        planEnd: '2022-02-01',\n        actualStart: '2021-09-01',\n        actualEnd: '2022-05-01',\n        parent: \"0\"\n      }, {\n        id: '5',\n        task: '12相离',\n        planStart: '2021-09-01',\n        planEnd: '2021-12-01',\n        actualStart: '2022-02-01',\n        actualEnd: '2022-05-01',\n        parent: \"0\"\n      }, {\n        id: '6',\n        task: '21相离',\n        planStart: '2022-02-01',\n        planEnd: '2022-05-01',\n        actualStart: '2021-09-01',\n        actualEnd: '2021-12-01',\n        parent: \"0\"\n      }, {\n        id: '7',\n        task: '1包含2',\n        planStart: '2021-09-01',\n        planEnd: '2022-05-01',\n        actualStart: '2021-09-01',\n        actualEnd: '2022-02-01',\n        parent: \"0\"\n      }, {\n        id: '8',\n        task: '1包含2',\n        planStart: '2021-09-01',\n        planEnd: '2022-05-01',\n        actualStart: '2021-12-01',\n        actualEnd: '2022-05-01',\n        parent: \"0\"\n      }, {\n        id: '9',\n        task: '2包含1',\n        planStart: '2021-09-01',\n        planEnd: '2022-02-01',\n        actualStart: '2021-09-01',\n        actualEnd: '2022-05-01',\n        parent: \"0\"\n      }, {\n        id: '10',\n        task: '2包含1',\n        planStart: '2021-12-01',\n        planEnd: '2022-05-01',\n        actualStart: '2021-09-01',\n        actualEnd: '2022-05-01',\n        parent: \"0\"\n      }, {\n        id: '11',\n        task: '你好',\n        planStart: '2021-09-01',\n        planEnd: '2022-05-01',\n        actualStart: '2021-09-01',\n        actualEnd: '2022-05-01',\n        parent: \"1\"\n      }];\n      let newArr = [];\n      arr.forEach((item, index) => {\n        let obj = this.getDate(item.planStart, item.planEnd, item.actualStart, item.actualEnd);\n        newArr.push({\n          id: item.id,\n          text: item.task,\n          start_date: new Date(moment(obj.minTime).format(\"YYYY-MM-DD\")),\n          progress1: Math.abs(obj.progress1),\n          progress2: Math.abs(obj.progress2),\n          progress3: Math.abs(obj.progress3),\n          duration: obj.duration,\n          planStart: item.planStart,\n          planEnd: item.planEnd,\n          actualStart: item.actualStart,\n          actualEnd: item.actualEnd,\n          state: obj.state,\n          colorType: obj.colorType,\n          parent: item.parent\n        });\n      });\n      this.tasks.data = newArr;\n    },\n    expandAllTasks() {\n      gantt.eachTask(task => {\n        gantt.open(task.id);\n      });\n    },\n    // 时间计算\n    getDate(Atime, Btime, Ctime, Dtime) {\n      let obj = {};\n      let arr = [Atime, Btime, Ctime, Dtime];\n      let timeArr = [];\n      arr.forEach(item => {\n        timeArr.push(new Date(item));\n      });\n      let minTime = moment(Math.min(...timeArr)).format(\"MM-DD-YYYY\");\n      let maxTime = moment(Math.max(...timeArr)).format(\"YYYY-MM-DD\");\n      let duration = this.difference(minTime, maxTime);\n      let progress1 = 0;\n      let progress2 = 0;\n      let progress3 = 0;\n      let state = true;\n      let colorType = true;\n      if (Atime < Ctime && Ctime < Btime && Btime < Dtime) {\n        // console.log('12相交', index)\n        colorType = 'j12';\n        progress2 = this.difference(Ctime, Btime) / duration;\n        progress1 = this.difference(Atime, Ctime) / duration;\n        progress3 = this.difference(Btime, Dtime) / duration;\n      } else if (Btime > Ctime && Btime >= Dtime && Ctime >= Atime && Dtime > Atime) {\n        // console.log('1包含2', index)\n        colorType = 'b12';\n        state = true;\n        progress2 = this.difference(Ctime, Dtime) / duration;\n        progress1 = this.difference(Atime, Ctime) / duration;\n        progress3 = this.difference(Dtime, Btime) / duration;\n      } else if (Dtime >= Btime && Dtime > Atime && Atime >= Ctime && Btime > Ctime) {\n        // console.log('2包含1', index)\n        colorType = 'b21';\n        state = true;\n        progress2 = this.difference(Atime, Btime) / duration;\n        progress1 = this.difference(Ctime, Atime) / duration;\n        progress3 = this.difference(Btime, Dtime) / duration;\n      } else if (Btime > Dtime && Dtime > Atime && Atime > Ctime) {\n        // console.log('21相交', index)\n        colorType = 'j21';\n        state = true;\n        progress2 = this.difference(Atime, Dtime) / duration;\n        progress1 = this.difference(Ctime, Atime) / duration;\n        progress3 = this.difference(Dtime, Btime) / duration;\n      } else if (Btime < Ctime) {\n        // console.log('12相离')\n        colorType = 'l12';\n        state = false;\n        progress2 = this.difference(Btime, Ctime) / duration;\n        progress1 = this.difference(Atime, Btime) / duration;\n        progress3 = this.difference(Ctime, Dtime) / duration;\n      } else if (Dtime < Atime) {\n        // console.log('21相离')\n        colorType = 'l21';\n        state = false;\n        progress2 = this.difference(Dtime, Atime) / duration;\n        progress3 = this.difference(Atime, Btime) / duration;\n        progress1 = this.difference(Ctime, Dtime) / duration;\n      } else {\n        colorType = 'one';\n        console.log('状态错误');\n      }\n      obj = {\n        state: state,\n        minTime: minTime,\n        duration: duration * 1,\n        progress1: progress1 * 1,\n        progress2: progress2 * 1,\n        progress3: progress3 * 1,\n        colorType: colorType\n      };\n      return obj;\n    },\n    difference(beginTime, Dtime) {\n      var dateBegin = new Date(beginTime);\n      var dateEnd = new Date(Dtime);\n      var dateDiff = dateEnd.getTime() - dateBegin.getTime(); //时间差的毫秒数\n      var dayDiff = Math.floor(dateDiff / (24 * 3600 * 1000)); //计算出相差天数\n      return dayDiff;\n    }\n  }\n};","map":{"version":3,"names":["moment","gantt","name","data","tasks","mounted","initData","config","show_progress","percenToString","num","Math","floor","renderLabel","progress","type","state","relWidth","cssClass","templates","task_text","start","end","task","colorType","progress1","progress2","progress3","plugins","marker","tooltip","dateToStr","date","date_to_str","task_date","today","Date","addMarker","start_date","css","text","format","title","tooltip_text","planStart","planEnd","actualStart","actualEnd","scale_unit","step","date_scale","subscales","unit","scale_height","i18n","setLocale","autosize","readonly","show_grid","columns","label","width","align","task_class","init","$refs","parse","methods","arr","id","parent","newArr","forEach","item","index","obj","getDate","push","minTime","abs","duration","expandAllTasks","eachTask","open","Atime","Btime","Ctime","Dtime","timeArr","min","maxTime","max","difference","console","log","beginTime","dateBegin","dateEnd","dateDiff","getTime","dayDiff"],"sources":["src/components/Gantt/Gantetu.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"legend\">\r\n      <div class=\"legendBox\">\r\n        <div class=\"legendSml legendColor1\"></div>\r\n        <div>计划时间</div>\r\n      </div>\r\n      <div class=\"legendBox\">\r\n        <div class=\"legendSml legendColor2\"></div>\r\n        <div>相交时间</div>\r\n      </div>\r\n      <div class=\"legendBox\">\r\n        <div class=\"legendSml legendColor3\"></div>\r\n        <div>实际时间</div>\r\n      </div>\r\n    </div>\r\n\r\n\r\n    <div ref=\"gantt\" class=\"left-container\" />\r\n  </div>\r\n</template>\r\n<script>\r\nimport moment from 'moment' // moment格式化时间\r\nimport gantt from \"dhtmlx-gantt\"; // 引入模块\r\nimport \"dhtmlx-gantt/codebase/dhtmlxgantt.css\"; //皮肤\r\n\r\nexport default {\r\n  name: \"gantt\",\r\n  data() {\r\n    return {\r\n      tasks: {\r\n        data: [],\r\n      },\r\n    };\r\n  },\r\n  mounted() {\r\n    this.initData();\r\n    \r\n    gantt.config.show_progress = false;\r\n    function percenToString(num) {\r\n      return Math.floor(num * 100) + \"%\";\r\n    }\r\n\r\n    // 设置每一部分的颜色\r\n    function renderLabel(progress, type, state) {\r\n      var relWidth = progress * 100;\r\n      var cssClass = \"custom_progress \";\r\n      if (type === 1) {\r\n        cssClass += \"nearly_done\";\r\n      } else if (type === 2) {\r\n        if (state) {\r\n          cssClass += \"in_progress\";\r\n        } else {\r\n          cssClass += \"in_progress_w\";\r\n        }\r\n      } else {\r\n        cssClass += \"idle\";\r\n      }\r\n      return (\r\n        \"<div class='\" +\r\n        cssClass +\r\n        \"' style='width:\" +\r\n        relWidth +\r\n        \"%'>\" +\r\n        percenToString(progress) +\r\n        \"</div>\"\r\n      );\r\n    }\r\n\r\n    // 根据定义类型判断颜色顺序\r\n    gantt.templates.task_text = function(start, end, task) {\r\n      let colorType = task.colorType\r\n      if (colorType === 'j12' || colorType === 'one') {\r\n        return (\r\n          renderLabel(task.progress1, 1, task.state) +\r\n          renderLabel(task.progress2, 2, task.state) +\r\n          renderLabel(task.progress3, 3, task.state)\r\n        );\r\n      } else if (colorType === 'j21') {\r\n        return (\r\n          renderLabel(task.progress1, 3, task.state) +\r\n          renderLabel(task.progress2, 2, task.state) +\r\n          renderLabel(task.progress3, 1, task.state)\r\n        );\r\n      } else if (colorType === 'b12') {\r\n        return (\r\n          renderLabel(task.progress1, 1, task.state) +\r\n          renderLabel(task.progress2, 2, task.state) +\r\n          renderLabel(task.progress3, 1, task.state)\r\n        );\r\n      } else if (colorType === 'b21') {\r\n        return (\r\n          renderLabel(task.progress1, 3, task.state) +\r\n          renderLabel(task.progress2, 2, task.state) +\r\n          renderLabel(task.progress3, 3, task.state)\r\n        );\r\n      } else if (colorType === 'l12') {\r\n        return (\r\n          renderLabel(task.progress1, 1, task.state) +\r\n          renderLabel(task.progress2, 2, task.state) +\r\n          renderLabel(task.progress3, 3, task.state)\r\n        );\r\n      } else if (colorType === 'l21') {\r\n        return (\r\n          renderLabel(task.progress1, 3, task.state) +\r\n          renderLabel(task.progress2, 2, task.state) +\r\n          renderLabel(task.progress3, 1, task.state)\r\n        );\r\n      } else {\r\n        return (\r\n          renderLabel(task.progress1, 1, task.state) +\r\n          renderLabel(task.progress2, 2, task.state) +\r\n          renderLabel(task.progress3, 3, task.state)\r\n        );\r\n      }\r\n    };\r\n    gantt.plugins({ marker: true, tooltip: true }); // 开启marker插件 \r\n    var dateToStr = gantt.date.date_to_str(gantt.config.task_date);\r\n    var today = new Date();\r\n    // 添加固定时间线\r\n    gantt.addMarker({\r\n      start_date: today,\r\n      css: 'today',\r\n      text: '今日:' + moment(new Date()).format('YYYY-MM-DD'),\r\n      title: 'Today: ' + dateToStr(today)\r\n    });\r\n    // 提示框内容\r\n    gantt.templates.tooltip_text = function(start, end, task){\r\n      return \"<b>任务内容:</b>\" + task.text +\r\n      \"<br/><b>计划开始:</b> \" + task.planStart +\r\n      \"<br/><b>计划结束:</b> \" + task.planEnd +\r\n      \"<br/><b>实际开始:</b> \" + task.actualStart +\r\n      \"<br/><b>实际结束:</b> \" + task.actualEnd\r\n    };\r\n\r\n    gantt.config.scale_unit = \"year\";\r\n    gantt.config.step = 1;\r\n    gantt.config.date_scale = \"%Y\";\r\n    //当右侧不止显示年份时，可以添加展示月日，添加一个就加一行\r\n    gantt.config.subscales = [\r\n      { unit: \"month\", step: 1, date: \"%m\" },\r\n    ];\r\n    //甘特图右侧表头的高度\r\n    gantt.config.scale_height = 80;\r\n    //使用中文\r\n    gantt.i18n.setLocale(\"cn\");\r\n    //自适应甘特图的尺寸大小, 使得在不出现滚动条的情况下, 显示全部任务\r\n    gantt.config.autosize = true;\r\n    //只读模式\r\n    gantt.config.readonly = true;\r\n    //是否显示左侧树表格\r\n    gantt.config.show_grid = true;\r\n    //表格列设置\r\n    gantt.config.columns = [\r\n      { name: \"text\", label: \"任务内容\", width: \"120\", align: \"center\" },\r\n      { name: \"planStart\", label: \"计划开始\", width: \"100\", align: \"center\" },\r\n      { name: \"planEnd\", label: \"计划结束\", width: \"100\", align: \"center\" },\r\n      { name: \"actualStart\", label: \"实际开始\", width: \"100\", align: \"center\" },\r\n      { name: \"actualEnd\", label: \"实际结束\", width: \"100\", align: \"center\" },\r\n    ];\r\n    //任务条上的文字大小 以及取消border自带样式\r\n    gantt.templates.task_class = function() {\r\n      return \"firstLevelTask\"\r\n    };\r\n    // 初始化\r\n    gantt.init(this.$refs.gantt);\r\n    // 数据解析\r\n    gantt.parse(this.tasks);\r\n  },\r\n  methods: {\r\n    initData() {\r\n      // 处理数据\r\n      let arr = [{\r\n        id: '1',\r\n        task: '12相交',\r\n        planStart: '2021-09-01',\r\n        planEnd: '2021-12-01',\r\n        actualStart: '2021-10-01',\r\n        actualEnd: '2022-02-01',\r\n        parent:\"0\"\r\n      }, {\r\n        id: '2',\r\n        task: '21相交',\r\n        planStart: '2021-10-01',\r\n        planEnd: '2022-02-01',\r\n        actualStart: '2021-09-01',\r\n        actualEnd: '2021-12-01',\r\n        parent:\"0\"\r\n      }, {\r\n        id: '3',\r\n        task: '1包含2',\r\n        planStart: '2021-09-01',\r\n        planEnd: '2022-05-01',\r\n        actualStart: '2021-12-01',\r\n        actualEnd: '2022-02-01',\r\n        parent:\"0\"\r\n      }, {\r\n        id: '4',\r\n        task: '2包含1',\r\n        planStart: '2021-12-01',\r\n        planEnd: '2022-02-01',\r\n        actualStart: '2021-09-01',\r\n        actualEnd: '2022-05-01',\r\n        parent:\"0\"\r\n      }, {\r\n        id: '5',\r\n        task: '12相离',\r\n        planStart: '2021-09-01',\r\n        planEnd: '2021-12-01',\r\n        actualStart: '2022-02-01',\r\n        actualEnd: '2022-05-01',\r\n        parent:\"0\"\r\n      }, {\r\n        id: '6',\r\n        task: '21相离',\r\n        planStart: '2022-02-01',\r\n        planEnd: '2022-05-01',\r\n        actualStart: '2021-09-01',\r\n        actualEnd: '2021-12-01',\r\n        parent:\"0\"\r\n      }, {\r\n        id: '7',\r\n        task: '1包含2',\r\n        planStart: '2021-09-01',\r\n        planEnd: '2022-05-01',\r\n        actualStart: '2021-09-01',\r\n        actualEnd: '2022-02-01',\r\n        parent:\"0\"\r\n      }, {\r\n        id: '8',\r\n        task: '1包含2',\r\n        planStart: '2021-09-01',\r\n        planEnd: '2022-05-01',\r\n        actualStart: '2021-12-01',\r\n        actualEnd: '2022-05-01',\r\n        parent:\"0\"\r\n      }, {\r\n        id: '9',\r\n        task: '2包含1',\r\n        planStart: '2021-09-01',\r\n        planEnd: '2022-02-01',\r\n        actualStart: '2021-09-01',\r\n        actualEnd: '2022-05-01',\r\n        parent:\"0\"\r\n        \r\n      }, {\r\n        id: '10',\r\n        task: '2包含1',\r\n        planStart: '2021-12-01',\r\n        planEnd: '2022-05-01',\r\n        actualStart: '2021-09-01',\r\n        actualEnd: '2022-05-01',\r\n        parent:\"0\"\r\n      }, {\r\n        id: '11',\r\n        task: '你好',\r\n        planStart: '2021-09-01',\r\n        planEnd: '2022-05-01',\r\n        actualStart: '2021-09-01',\r\n        actualEnd: '2022-05-01',\r\n        parent:\"1\"\r\n      }];\r\n\r\n      let newArr = []\r\n      arr.forEach((item, index) => {\r\n        let obj = this.getDate(item.planStart, item.planEnd, item.actualStart, item.actualEnd)\r\n        newArr.push({\r\n          id: item.id,\r\n          text: item.task,\r\n          start_date: new Date(moment(obj.minTime).format(\"YYYY-MM-DD\")),\r\n          progress1: Math.abs(obj.progress1),\r\n          progress2: Math.abs(obj.progress2),\r\n          progress3: Math.abs(obj.progress3),\r\n          duration: obj.duration,\r\n\r\n          planStart: item.planStart,\r\n          planEnd: item.planEnd,\r\n          actualStart: item.actualStart,\r\n          actualEnd: item.actualEnd,\r\n          state: obj.state,\r\n          colorType: obj.colorType,\r\n          parent:item.parent\r\n        })\r\n      });\r\n      this.tasks.data = newArr\r\n    },\r\n    expandAllTasks(){\r\n      gantt.eachTask((task) => {\r\n        gantt.open(task.id);\r\n      });\r\n    },\r\n    // 时间计算\r\n    getDate(Atime, Btime, Ctime, Dtime) {\r\n      let obj = {};\r\n      let arr = [Atime, Btime, Ctime, Dtime];\r\n      let timeArr = [];\r\n      arr.forEach((item) => {\r\n        timeArr.push(new Date(item));\r\n      });\r\n      let minTime = moment(Math.min(...timeArr)).format(\"MM-DD-YYYY\");\r\n      let maxTime = moment(Math.max(...timeArr)).format(\"YYYY-MM-DD\");\r\n      let duration = this.difference(minTime, maxTime);\r\n\r\n      let progress1 = 0;\r\n      let progress2 = 0;\r\n      let progress3 = 0;\r\n      let state = true;\r\n      let colorType = true;\r\n\r\n      if (Atime < Ctime && Ctime < Btime &&  Btime < Dtime) {\r\n        // console.log('12相交', index)\r\n        colorType = 'j12'\r\n        progress2 = (this.difference(Ctime, Btime) / duration)\r\n        progress1 = (this.difference(Atime, Ctime) / duration)\r\n        progress3 = (this.difference(Btime, Dtime) / duration)\r\n      } else if (Btime > Ctime && Btime >= Dtime && Ctime >= Atime && Dtime > Atime) {\r\n        // console.log('1包含2', index)\r\n        colorType = 'b12'\r\n        state = true\r\n        progress2 = (this.difference(Ctime, Dtime) / duration)\r\n        progress1 = (this.difference(Atime, Ctime) / duration)\r\n        progress3 = (this.difference(Dtime, Btime) / duration)\r\n      } else if (Dtime >= Btime && Dtime > Atime && Atime >= Ctime && Btime > Ctime) {\r\n        // console.log('2包含1', index)\r\n        colorType = 'b21'\r\n        state = true\r\n        progress2 = (this.difference(Atime, Btime) / duration)\r\n        progress1 = (this.difference(Ctime, Atime) / duration)\r\n        progress3 = (this.difference(Btime, Dtime) / duration)\r\n      } else if (Btime > Dtime && Dtime > Atime && Atime > Ctime) {\r\n        // console.log('21相交', index)\r\n        colorType = 'j21'\r\n        state = true\r\n        progress2 = (this.difference(Atime, Dtime) / duration)\r\n        progress1 = (this.difference(Ctime, Atime) / duration)\r\n        progress3 = (this.difference(Dtime, Btime) / duration)\r\n      } else if (Btime < Ctime) {\r\n        // console.log('12相离')\r\n        colorType = 'l12'\r\n        state = false\r\n        progress2 = (this.difference(Btime, Ctime) / duration)\r\n        progress1 = (this.difference(Atime, Btime) / duration)\r\n        progress3 = (this.difference(Ctime, Dtime) / duration)\r\n      } else if (Dtime < Atime) {\r\n        // console.log('21相离')\r\n        colorType = 'l21'\r\n        state = false\r\n        progress2 = (this.difference(Dtime, Atime) / duration)\r\n        progress3 = (this.difference(Atime, Btime) / duration)\r\n        progress1 = (this.difference(Ctime, Dtime) / duration)\r\n      } else {\r\n        colorType = 'one'\r\n        console.log('状态错误')\r\n      }\r\n      obj = {\r\n        state: state,\r\n        minTime: minTime,\r\n        duration: duration * 1,\r\n        progress1: progress1 * 1,\r\n        progress2: progress2 * 1,\r\n        progress3: progress3 * 1,\r\n        colorType: colorType,\r\n      };\r\n      return obj;\r\n    },\r\n    difference(beginTime, Dtime) {\r\n      var dateBegin = new Date(beginTime);\r\n      var dateEnd = new Date(Dtime);\r\n      var dateDiff = dateEnd.getTime() - dateBegin.getTime(); //时间差的毫秒数\r\n      var dayDiff = Math.floor(dateDiff / (24 * 3600 * 1000)); //计算出相差天数\r\n      return dayDiff;\r\n    }\r\n  }\r\n}\r\n</script>\r\n<style lang=\"scss\">\r\nhtml,\r\nbody {\r\n  height: 100%;\r\n  padding: 0px;\r\n  margin: 0px;\r\n  overflow: hidden;\r\n}\r\n\r\n.legend {\r\n  padding: 10px;\r\n  display: flex;\r\n\r\n  .legendBox {\r\n    display: flex;\r\n    align-items: center;\r\n    margin-right: 20px;\r\n\r\n    .legendSml {\r\n      width: 30px;\r\n      height: 16px;\r\n      border-radius: 5px;\r\n      margin-right: 4px;\r\n    }\r\n\r\n    .legendColor1 {\r\n      background: #01aff4;\r\n    }\r\n    .legendColor2 {\r\n      background: #0169bd;\r\n    }\r\n    .legendColor3 {\r\n      background: rgb(1, 105 , 189, 50%);\r\n    }\r\n  }\r\n}\r\n\r\n.gantt_task_content {\r\n  display: flex;\r\n}\r\n\r\n.gantt_task_line {\r\n  background: #fff;\r\n}\r\n\r\n.custom_progress {\r\n  display: inline-block;\r\n  vertical-align: top;\r\n  text-align: center;\r\n  height: 100%;\r\n}\r\n.nearly_done {\r\n  background-color: #01aff4 !important;\r\n}\r\n\r\n.in_progress {\r\n  background-color: #0169bd !important;\r\n}\r\n\r\n.in_progress_w {\r\n  background-color: #FFF !important;\r\n}\r\n\r\n.idle {\r\n  background-color: rgb(1, 105 , 189, 50%) !important;\r\n}\r\n.firstLevelTask {\r\n  border: none;\r\n}\r\n\r\n.secondLevelTask {\r\n  border: none;\r\n}\r\n\r\n.left-container {\r\n  height: 600px;\r\n}\r\n</style>\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}