{"ast":null,"code":"import axios from \"axios\"; //引入axios\nimport env from \"@/api/http/env\";\nimport { Message } from \"element-ui\";\n// const service = axios.create({\n//     baseURL:env.dev.baseUrl,\n//     timeout:5000\n// })\n\n// service.interceptors.request.use(\n//     config => {\n//         return config.data\n//     },\n//     error =>{\n//         console.log(error);\n//         return Promise.reject(error);\n//     }\n// )\n\n// 创建axios实例\nconst service = axios.create({\n  //这里拿开发接口测试\n  baseURL: env.dev.baseUrl,\n  // headers:{ //请求头\n  //     'Content-Type': 'application/json;charset=UTF-8',\n  // },\n  timeout: 5000 //超时时间\n});\n// 请求拦截器\nservice.interceptors.request.use(config => {\n  //验证token\n  // console.log(\"请求的数据:\", config);\n  // if (localStorage.getItem('token')) {\n  //   config.headers.token = localStorage.getItem('token')\n  // }\n  return config;\n}, error => {\n  // 对请求错误做些什么\n  // console.log(\"请求的数据:\", error);\n\n  Message({\n    message: 'Error',\n    type: 'error',\n    duration: 5 * 1000\n  });\n  return Promise.reject(error);\n});\n\n// 响应拦截器\nservice.interceptors.response.use((response, err) => {\n  console.log('response', response);\n  // console.log(\"返回的数据\", response);\n  // 这里拦截401错误，并重新跳入登页重新获取token\n  // if (response.status && response.status === 200) {\n  // 通讯成功\n  //   if (response.data.code === 0) {\n  // return response.data\n  //   } \n  //   else if (response.data.code === 401) { \n  //     // 如果是token过期，跳转至登录\n  //     this.$message.error(\"登录已过期，请重新登录！\");\n  //     localStorage.removeItem('token') // 移除token，跳转至登录\n  //     router.push({ \n  //       path: '/Login'\n  //     })\n  //   }\n  switch (response.status) {\n    case 200:\n      Message.success('请求成功');\n      break;\n    case 400:\n      err.message = '请求错误';\n      Message.error(err.message);\n      break;\n    case 401:\n      err.message = '未授权，请登录';\n      Message.error(err.message);\n      break;\n    case 403:\n      err.message = '拒绝访问';\n      Message.error(err.message);\n      break;\n    case 404:\n      err.message = `请求地址出错: ${err.response.config.url}`;\n      Message.error(err.message);\n      break;\n    case 408:\n      err.message = '请求超时';\n      Message.error(err.message);\n      break;\n    case 500:\n      err.message = '服务器内部错误';\n      Message.error(err.message);\n      break;\n    case 501:\n      err.message = '服务未实现';\n      Message.error(err.message);\n      break;\n    case 502:\n      err.message = '网关错误';\n      Message.error(err.message);\n      break;\n    case 503:\n      err.message = '服务不可用';\n      Message.error(err.message);\n      break;\n    case 504:\n      err.message = '网关超时';\n      Message.error(err.message);\n      break;\n    case 505:\n      err.message = 'HTTP版本不受支持';\n      Message.error(err.message);\n      break;\n    case 0:\n      err.message = '接口不存在';\n      Message.error(err.message);\n      break;\n    default:\n  }\n  return Promise.resolve(response.data);\n  // }\n});\n\nexport default service;","map":{"version":3,"names":["axios","env","Message","service","create","baseURL","dev","baseUrl","timeout","interceptors","request","use","config","error","message","type","duration","Promise","reject","response","err","console","log","status","success","url","resolve","data"],"sources":["D:/Lowcode/vue-low-code/src/utils/request.js"],"sourcesContent":["import axios from \"axios\";  //引入axios\r\nimport env from \"@/api/http/env\"; \r\nimport { Message } from \"element-ui\";\r\n// const service = axios.create({\r\n//     baseURL:env.dev.baseUrl,\r\n//     timeout:5000\r\n// })\r\n\r\n// service.interceptors.request.use(\r\n//     config => {\r\n//         return config.data\r\n//     },\r\n//     error =>{\r\n//         console.log(error);\r\n//         return Promise.reject(error);\r\n//     }\r\n// )\r\n\r\n// 创建axios实例\r\nconst service = axios.create({\r\n\t//这里拿开发接口测试\r\n\tbaseURL: env.dev.baseUrl,\r\n    // headers:{ //请求头\r\n    //     'Content-Type': 'application/json;charset=UTF-8',\r\n    // },\r\n    timeout:5000,//超时时间\r\n});\r\n// 请求拦截器\r\nservice.interceptors.request.use(\r\nconfig => {\r\n    //验证token\r\n    // console.log(\"请求的数据:\", config);\r\n    // if (localStorage.getItem('token')) {\r\n    //   config.headers.token = localStorage.getItem('token')\r\n    // }\r\n    return config; \r\n},\r\nerror => {\r\n    // 对请求错误做些什么\r\n    // console.log(\"请求的数据:\", error);\r\n\r\n    Message({\r\n        message: 'Error',\r\n        type: 'error',\r\n        duration: 5 * 1000\r\n      })\r\n    return Promise.reject(error);\r\n}\r\n);\r\n \r\n// 响应拦截器\r\nservice.interceptors.response.use(\r\n(response,err) => {\r\n    console.log('response',response);\r\n    // console.log(\"返回的数据\", response);\r\n    // 这里拦截401错误，并重新跳入登页重新获取token\r\n    // if (response.status && response.status === 200) {\r\n      // 通讯成功\r\n    //   if (response.data.code === 0) {\r\n        // return response.data\r\n    //   } \r\n    //   else if (response.data.code === 401) { \r\n    //     // 如果是token过期，跳转至登录\r\n    //     this.$message.error(\"登录已过期，请重新登录！\");\r\n    //     localStorage.removeItem('token') // 移除token，跳转至登录\r\n    //     router.push({ \r\n    //       path: '/Login'\r\n    //     })\r\n    //   }\r\n         switch (response.status) {\r\n            case 200:\r\n            Message.success('请求成功')\r\n            break\r\n          case 400:\r\n            err.message = '请求错误'\r\n            Message.error( err.message)\r\n          \r\n            break\r\n          case 401:\r\n            err.message = '未授权，请登录'\r\n            Message.error( err.message)\r\n            break\r\n          case 403:\r\n            err.message = '拒绝访问'\r\n            Message.error( err.message)\r\n            break\r\n          case 404:\r\n            err.message = `请求地址出错: ${err.response.config.url}`\r\n            Message.error( err.message)\r\n            break\r\n          case 408:\r\n            err.message = '请求超时'\r\n            Message.error( err.message)\r\n            break\r\n          case 500:\r\n            err.message = '服务器内部错误'\r\n            Message.error( err.message)\r\n            break\r\n          case 501:\r\n            err.message = '服务未实现'\r\n            Message.error( err.message)\r\n            break\r\n          case 502:\r\n            err.message = '网关错误'\r\n            Message.error( err.message)\r\n            break\r\n          case 503:\r\n            err.message = '服务不可用'\r\n            Message.error( err.message)\r\n            break\r\n          case 504:\r\n            err.message = '网关超时'\r\n            Message.error( err.message)\r\n            break\r\n          case 505:\r\n            err.message = 'HTTP版本不受支持'\r\n            Message.error( err.message)\r\n            break\r\n            case 0:\r\n                err.message = '接口不存在'\r\n                Message.error( err.message)\r\n                break\r\n          default:\r\n        }\r\n      return Promise.resolve(response.data)\r\n    // }\r\n    \r\n}\r\n);\r\nexport default service;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}