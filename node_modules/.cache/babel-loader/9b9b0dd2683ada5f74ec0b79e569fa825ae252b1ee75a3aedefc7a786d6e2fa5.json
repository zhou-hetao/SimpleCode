{"ast":null,"code":"import axios from \"axios\"; //引入axios\nimport env from \"@/api/http/env\";\n\n// 创建axios实例\nconst service = axios.create({\n  //这里拿开发接口测试\n  baseURL: 'http://127.0.0.1:7001/api',\n  // headers:{ //请求头\n  //     'Content-Type': 'application/json;charset=UTF-8',\n  // },\n  timeout: 5000 //超时时间\n});\n// 请求拦截器\nservice.interceptors.request.use(config => {\n  //验证token\n  // console.log(\"请求的数据:\", config);\n  // if (localStorage.getItem('token')) {\n  //   config.headers.token = localStorage.getItem('token')\n  // }\n  return config; //记得一定要 返回config\n}, error => {\n  // 对请求错误做些什么\n  // console.log(\"请求的数据:\", error);\n\n  return Promise.reject(error);\n});\n\n// 响应拦截器\nservice.interceptors.response.use(response => {\n  // console.log(\"返回的数据\", response);\n  // 这里拦截401错误，并重新跳入登页重新获取token\n  if (response.status && response.status === 200) {\n    // 通讯成功\n    if (response.data.code === 0) {\n      return response.data;\n    }\n    //   else if (response.data.code === 401) { \n    //     // 如果是token过期，跳转至登录\n    //     this.$message.error(\"登录已过期，请重新登录！\");\n    //     localStorage.removeItem('token') // 移除token，跳转至登录\n    //     router.push({ \n    //       path: '/Login'\n    //     })\n    //   }\n    return Promise.resolve(response.data);\n  }\n}, err => {\n  // 对响应错误做点什么.\n  if (err && err.response) {\n    switch (err.response.status) {\n      case 400:\n        err.message = '请求错误';\n        break;\n      case 401:\n        err.message = '未授权，请登录';\n        break;\n      case 403:\n        err.message = '拒绝访问';\n        break;\n      case 404:\n        err.message = `请求地址出错: ${err.response.config.url}`;\n        break;\n      case 408:\n        err.message = '请求超时';\n        break;\n      case 500:\n        err.message = '服务器内部错误';\n        break;\n      case 501:\n        err.message = '服务未实现';\n        break;\n      case 502:\n        err.message = '网关错误';\n        break;\n      case 503:\n        err.message = '服务不可用';\n        break;\n      case 504:\n        err.message = '网关超时';\n        break;\n      case 505:\n        err.message = 'HTTP版本不受支持';\n        break;\n      default:\n    }\n  }\n  console.error(err);\n  return Promise.reject(err); // 返回接口返回的错误信息\n});\n\nexport default service;","map":{"version":3,"names":["axios","env","service","create","baseURL","timeout","interceptors","request","use","config","error","Promise","reject","response","status","data","code","resolve","err","message","url","console"],"sources":["D:/Lowcode/vue-low-code/src/utils/request.js"],"sourcesContent":["import axios from \"axios\";  //引入axios\r\nimport env from \"@/api/http/env\"; \r\n\r\n// 创建axios实例\r\nconst service = axios.create({\r\n\t//这里拿开发接口测试\r\n\tbaseURL: 'http://127.0.0.1:7001/api',\r\n    // headers:{ //请求头\r\n    //     'Content-Type': 'application/json;charset=UTF-8',\r\n    // },\r\n    timeout:5000,//超时时间\r\n});\r\n// 请求拦截器\r\nservice.interceptors.request.use(\r\nconfig => {\r\n    //验证token\r\n    // console.log(\"请求的数据:\", config);\r\n    // if (localStorage.getItem('token')) {\r\n    //   config.headers.token = localStorage.getItem('token')\r\n    // }\r\n    return config; //记得一定要 返回config\r\n},\r\nerror => {\r\n    // 对请求错误做些什么\r\n    // console.log(\"请求的数据:\", error);\r\n\r\n\r\n    return Promise.reject(error);\r\n}\r\n);\r\n \r\n// 响应拦截器\r\nservice.interceptors.response.use(\r\nresponse => {\r\n    // console.log(\"返回的数据\", response);\r\n    // 这里拦截401错误，并重新跳入登页重新获取token\r\n    if (response.status && response.status === 200) {\r\n      // 通讯成功\r\n      if (response.data.code === 0) {\r\n        return response.data\r\n      } \r\n    //   else if (response.data.code === 401) { \r\n    //     // 如果是token过期，跳转至登录\r\n    //     this.$message.error(\"登录已过期，请重新登录！\");\r\n    //     localStorage.removeItem('token') // 移除token，跳转至登录\r\n    //     router.push({ \r\n    //       path: '/Login'\r\n    //     })\r\n    //   }\r\n      return Promise.resolve(response.data)\r\n    }\r\n},\r\nerr => {\r\n    // 对响应错误做点什么.\r\n    if (err && err.response) {\r\n        switch (err.response.status) {\r\n          case 400:\r\n            err.message = '请求错误'\r\n            break\r\n          case 401:\r\n            err.message = '未授权，请登录'\r\n            break\r\n          case 403:\r\n            err.message = '拒绝访问'\r\n            break\r\n          case 404:\r\n            err.message = `请求地址出错: ${err.response.config.url}`\r\n            break\r\n          case 408:\r\n            err.message = '请求超时'\r\n            break\r\n          case 500:\r\n            err.message = '服务器内部错误'\r\n            break\r\n          case 501:\r\n            err.message = '服务未实现'\r\n            break\r\n          case 502:\r\n            err.message = '网关错误'\r\n            break\r\n          case 503:\r\n            err.message = '服务不可用'\r\n            break\r\n          case 504:\r\n            err.message = '网关超时'\r\n            break\r\n          case 505:\r\n            err.message = 'HTTP版本不受支持'\r\n            break\r\n          default:\r\n        }\r\n      }\r\n      console.error(err)\r\n      return Promise.reject(err) // 返回接口返回的错误信息\r\n}\r\n);\r\nexport default service;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO,CAAC,CAAE;AAC5B,OAAOC,GAAG,MAAM,gBAAgB;;AAEhC;AACA,MAAMC,OAAO,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC5B;EACAC,OAAO,EAAE,2BAA2B;EACjC;EACA;EACA;EACAC,OAAO,EAAC,IAAI,CAAC;AACjB,CAAC,CAAC;AACF;AACAH,OAAO,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAChCC,MAAM,IAAI;EACN;EACA;EACA;EACA;EACA;EACA,OAAOA,MAAM,CAAC,CAAC;AACnB,CAAC,EACDC,KAAK,IAAI;EACL;EACA;;EAGA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACA,CAAC;;AAED;AACAR,OAAO,CAACI,YAAY,CAACO,QAAQ,CAACL,GAAG,CACjCK,QAAQ,IAAI;EACR;EACA;EACA,IAAIA,QAAQ,CAACC,MAAM,IAAID,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;IAC9C;IACA,IAAID,QAAQ,CAACE,IAAI,CAACC,IAAI,KAAK,CAAC,EAAE;MAC5B,OAAOH,QAAQ,CAACE,IAAI;IACtB;IACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACE,OAAOJ,OAAO,CAACM,OAAO,CAACJ,QAAQ,CAACE,IAAI,CAAC;EACvC;AACJ,CAAC,EACDG,GAAG,IAAI;EACH;EACA,IAAIA,GAAG,IAAIA,GAAG,CAACL,QAAQ,EAAE;IACrB,QAAQK,GAAG,CAACL,QAAQ,CAACC,MAAM;MACzB,KAAK,GAAG;QACNI,GAAG,CAACC,OAAO,GAAG,MAAM;QACpB;MACF,KAAK,GAAG;QACND,GAAG,CAACC,OAAO,GAAG,SAAS;QACvB;MACF,KAAK,GAAG;QACND,GAAG,CAACC,OAAO,GAAG,MAAM;QACpB;MACF,KAAK,GAAG;QACND,GAAG,CAACC,OAAO,GAAI,WAAUD,GAAG,CAACL,QAAQ,CAACJ,MAAM,CAACW,GAAI,EAAC;QAClD;MACF,KAAK,GAAG;QACNF,GAAG,CAACC,OAAO,GAAG,MAAM;QACpB;MACF,KAAK,GAAG;QACND,GAAG,CAACC,OAAO,GAAG,SAAS;QACvB;MACF,KAAK,GAAG;QACND,GAAG,CAACC,OAAO,GAAG,OAAO;QACrB;MACF,KAAK,GAAG;QACND,GAAG,CAACC,OAAO,GAAG,MAAM;QACpB;MACF,KAAK,GAAG;QACND,GAAG,CAACC,OAAO,GAAG,OAAO;QACrB;MACF,KAAK,GAAG;QACND,GAAG,CAACC,OAAO,GAAG,MAAM;QACpB;MACF,KAAK,GAAG;QACND,GAAG,CAACC,OAAO,GAAG,YAAY;QAC1B;MACF;IACF;EACF;EACAE,OAAO,CAACX,KAAK,CAACQ,GAAG,CAAC;EAClB,OAAOP,OAAO,CAACC,MAAM,CAACM,GAAG,CAAC,EAAC;AACjC,CACA,CAAC;;AACD,eAAehB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}