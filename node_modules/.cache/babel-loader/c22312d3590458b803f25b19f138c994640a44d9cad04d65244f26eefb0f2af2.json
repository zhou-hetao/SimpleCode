{"ast":null,"code":"import axios from \"axios\"; //引入axios\nimport { Message } from \"element-ui\";\nconsole.log(\"process.env\", process.env);\nconsole.log('process.env.VUE_APP_BASE_URL + \"/api\",', process.env.VUE_APP_BASE_URL + \"/api\");\n// 创建axios实例\nconst service = axios.create({\n  //这里拿开发接口测试\n  baseURL: process.env.VUE_APP_BASE_URL + \"/api\",\n  headers: {\n    \"Content-type\": \"application/x-www-form-urlencoded\"\n  },\n  //设置指定请求头\n  timeout: 5000 //超时时间\n});\n// 请求拦截器\nservice.interceptors.request.use(config => {\n  //验证token\n  // console.log(\"请求的数据:\", config);\n  // if (localStorage.getItem('token')) {\n  //   config.headers.token = localStorage.getItem('token')\n  // }\n  // 在请求头中添加token验证信息\n  const token = localStorage.getItem(\"token\"); // 假设token存储在localStorage中\n  if (token) {\n    config.headers[\"Authorization\"] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  // 对请求错误做些什么\n  // console.log(\"请求的数据:\", error);\n  return Promise.reject(error);\n});\n\n// 响应拦截器\nservice.interceptors.response.use(response => {\n  // console.log(\"返回的数据\", response);\n  // 这里拦截401错误，并重新跳入登页重新获取token\n  if (response.status && response.status === 200) {\n    // 通讯成功\n    //   if (response.data.code === 401) {\n    //     // 如果是token过期，跳转至登录\n    //     Message.error(\"登陆过期重新登陆\")\n    //     localStorage.removeItem('token') // 移除token，跳转至登录\n    //     router.push({\n    //       path: '/login'\n    //     })\n    //   }\n    return Promise.resolve(response.data);\n  }\n}, err => {\n  // 对响应错误做点什么.\n  if (err && err.response) {\n    switch (err.response.status) {\n      case 400:\n        err.message = \"请求错误\";\n        Message.error(err.message);\n        break;\n      case 401:\n        err.message = \"未授权，请登录\";\n        Message.error(err.message);\n        break;\n      case 403:\n        err.message = \"拒绝访问\";\n        Message.error(err.message);\n        break;\n      case 404:\n        err.message = `服务器出错:`;\n        Message.error(err.message);\n        break;\n      case 408:\n        err.message = \"请求超时\";\n        Message.error(err.message);\n        break;\n      case 500:\n        err.message = \"服务器内部错误\";\n        Message.error(err.message);\n        break;\n      case 501:\n        err.message = \"服务未实现\";\n        Message.error(err.message);\n        break;\n      case 502:\n        err.message = \"网关错误\";\n        Message.error(err.message);\n        break;\n      case 503:\n        err.message = \"服务不可用\";\n        Message.error(err.message);\n        break;\n      case 504:\n        err.message = \"网关超时\";\n        Message.error(err.message);\n        break;\n      case 505:\n        err.message = \"HTTP版本不受支持\";\n        Message.error(err.message);\n        break;\n      case 0:\n        err.message = \"接口不存在\";\n        console.log(\"111\");\n        Message.error(err.message);\n        break;\n      default:\n    }\n  }\n  return Promise.reject(err); // 返回接口返回的错误信息\n});\n\nexport default service;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}