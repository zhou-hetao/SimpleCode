{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\"; //引入axios\nimport env from \"@/api/http/env\";\n\n// 创建axios实例\nconst service = axios.create({\n  //这里拿线上接口测试\n  baseUrl: env.prod.baseUrl,\n  headers: {\n    //请求头\n    'Content-Type': 'application/json;charset=UTF-8'\n  },\n  settimeout: 50000 //超时时间\n});\n// 请求拦截器\nservice.interceptors.request.use(config => {\n  // 在发送请求之前做些什么 验证token之类的\n  // console.log(\"请求的数据:\", config);\n  if (localStorage.getItem('token')) {\n    config.headers.token = localStorage.getItem('token');\n  }\n  return config; //记得一定要 返回config\n}, error => {\n  // 对请求错误做些什么\n  // console.log(\"请求的数据:\", error);\n  return Promise.reject(error);\n});\n\n// 响应拦截器\nservice.interceptors.response.use(response => {\n  // console.log(\"返回的数据\", response);\n  // 这里拦截401错误，并重新跳入登页重新获取token\n  if (response.status && response.status === 200) {\n    // 通讯成功\n    if (response.data.code === 0) {\n      return response.data;\n    } else if (response.data.code === 401) {\n      // 如果是token过期，跳转至登录\n      this.$message.error(\"登录已过期，请重新登录！\");\n      localStorage.removeItem('token'); // 移除token，跳转至登录\n      router.push({\n        path: '/Login'\n      });\n    }\n    return Promise.resolve(response.data);\n  }\n}, error => {\n  // 对响应错误做点什么\n  return Promise.reject(error);\n});\nexport default service;","map":{"version":3,"names":["axios","env","service","create","baseUrl","prod","headers","settimeout","interceptors","request","use","config","localStorage","getItem","token","error","Promise","reject","response","status","data","code","$message","removeItem","router","push","path","resolve"],"sources":["D:/Lowcode/vue-low-code/src/utils/request.js"],"sourcesContent":["import axios from \"axios\";  //引入axios\r\nimport env from \"@/api/http/env\"; \r\n\r\n// 创建axios实例\r\nconst service = axios.create({\r\n\t//这里拿线上接口测试\r\n\tbaseUrl: env.prod.baseUrl,\r\n    headers:{ //请求头\r\n        'Content-Type': 'application/json;charset=UTF-8',\r\n    },\r\n    settimeout:50000,//超时时间\r\n});\r\n// 请求拦截器\r\nservice.interceptors.request.use(\r\nconfig => {\r\n    // 在发送请求之前做些什么 验证token之类的\r\n    // console.log(\"请求的数据:\", config);\r\n    if (localStorage.getItem('token')) {\r\n      config.headers.token = localStorage.getItem('token')\r\n    }\r\n    return config; //记得一定要 返回config\r\n},\r\nerror => {\r\n    // 对请求错误做些什么\r\n    // console.log(\"请求的数据:\", error);\r\n    return Promise.reject(error);\r\n}\r\n);\r\n \r\n// 响应拦截器\r\nservice.interceptors.response.use(\r\nresponse => {\r\n    // console.log(\"返回的数据\", response);\r\n    // 这里拦截401错误，并重新跳入登页重新获取token\r\n    if (response.status && response.status === 200) {\r\n      // 通讯成功\r\n      if (response.data.code === 0) {\r\n        return response.data\r\n      } else if (response.data.code === 401) { \r\n        // 如果是token过期，跳转至登录\r\n        this.$message.error(\"登录已过期，请重新登录！\");\r\n        localStorage.removeItem('token') // 移除token，跳转至登录\r\n        router.push({ \r\n          path: '/Login'\r\n        })\r\n      }\r\n      return Promise.resolve(response.data)\r\n    }\r\n},\r\nerror => {\r\n    // 对响应错误做点什么\r\n    return Promise.reject(error);\r\n}\r\n);\r\nexport default service;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO,CAAC,CAAE;AAC5B,OAAOC,GAAG,MAAM,gBAAgB;;AAEhC;AACA,MAAMC,OAAO,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC5B;EACAC,OAAO,EAAEH,GAAG,CAACI,IAAI,CAACD,OAAO;EACtBE,OAAO,EAAC;IAAE;IACN,cAAc,EAAE;EACpB,CAAC;EACDC,UAAU,EAAC,KAAK,CAAC;AACrB,CAAC,CAAC;AACF;AACAL,OAAO,CAACM,YAAY,CAACC,OAAO,CAACC,GAAG,CAChCC,MAAM,IAAI;EACN;EACA;EACA,IAAIC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,EAAE;IACjCF,MAAM,CAACL,OAAO,CAACQ,KAAK,GAAGF,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACtD;EACA,OAAOF,MAAM,CAAC,CAAC;AACnB,CAAC,EACDI,KAAK,IAAI;EACL;EACA;EACA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACA,CAAC;;AAED;AACAb,OAAO,CAACM,YAAY,CAACU,QAAQ,CAACR,GAAG,CACjCQ,QAAQ,IAAI;EACR;EACA;EACA,IAAIA,QAAQ,CAACC,MAAM,IAAID,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;IAC9C;IACA,IAAID,QAAQ,CAACE,IAAI,CAACC,IAAI,KAAK,CAAC,EAAE;MAC5B,OAAOH,QAAQ,CAACE,IAAI;IACtB,CAAC,MAAM,IAAIF,QAAQ,CAACE,IAAI,CAACC,IAAI,KAAK,GAAG,EAAE;MACrC;MACA,IAAI,CAACC,QAAQ,CAACP,KAAK,CAAC,cAAc,CAAC;MACnCH,YAAY,CAACW,UAAU,CAAC,OAAO,CAAC,EAAC;MACjCC,MAAM,CAACC,IAAI,CAAC;QACVC,IAAI,EAAE;MACR,CAAC,CAAC;IACJ;IACA,OAAOV,OAAO,CAACW,OAAO,CAACT,QAAQ,CAACE,IAAI,CAAC;EACvC;AACJ,CAAC,EACDL,KAAK,IAAI;EACL;EACA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACA,CAAC;AACD,eAAeb,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}