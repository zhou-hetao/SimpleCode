{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport moment from \"moment\"; // moment格式化时间\nimport gantt from \"dhtmlx-gantt\"; // 引入模块\nimport \"dhtmlx-gantt/codebase/dhtmlxgantt.css\"; //皮肤\n\nexport default {\n  name: \"gantt\",\n  data() {\n    return {\n      tasks: {\n        data: []\n      }\n    };\n  },\n  mounted() {\n    let arr = [{\n      //没有实际结束   实际开始在计划之前（不显示） b121\n      id: \"7086894358414229504\",\n      nbProjectId: \"7086894357860581376\",\n      projectVesselId: \"7086894358300983296\",\n      vesselNameCn: \"凯勇\",\n      vesselNameEn: \"NEW VALOR\",\n      parentId: \"0\",\n      dispNo: 1,\n      scheduleNameCn: \"签约\",\n      scheduleNameEn: \"Sign\",\n      scheduleBeginDate: \"2023-07-01\",\n      scheduleEndDate: \"2024-01-24\",\n      actualBeginDate: \"2023-06-05\",\n      actualEndDate: null,\n      stageCode: \"VESSEL_SCHEDULE_1\",\n      completedPercent: 22,\n      scheduleRemark: null,\n      fileIds: null,\n      businessCode: null\n    }, {\n      //有实际结束   实际开始在计划之后（显示） b12\n      id: \"7086894728481865728\",\n      nbProjectId: \"7086894357860581376\",\n      projectVesselId: \"7086894358300983296\",\n      vesselNameCn: \"凯勇\",\n      vesselNameEn: \"NEW VALOR\",\n      parentId: \"7086894358414229504\",\n      dispNo: null,\n      scheduleNameCn: \"采购设备\",\n      scheduleNameEn: \"caigoushebei\",\n      scheduleBeginDate: \"2023-07-01\",\n      scheduleEndDate: \"2024-01-24\",\n      actualBeginDate: \"2023-07-05\",\n      actualEndDate: \"2023-07-28\",\n      stageCode: \"\",\n      completedPercent: 13,\n      scheduleRemark: \"\",\n      fileIds: null,\n      businessCode: null\n    }, {\n      //有实际结束   实际开始在计划之前（显示） j21\n      id: \"7088381175781130240\",\n      nbProjectId: \"7086894357860581376\",\n      projectVesselId: \"7086894358300983296\",\n      vesselNameCn: \"凯勇\",\n      vesselNameEn: \"NEW VALOR\",\n      parentId: \"7086894358414229504\",\n      dispNo: null,\n      scheduleNameCn: \"审图\",\n      scheduleNameEn: \"Plan Approval\",\n      scheduleBeginDate: \"2023-07-01\",\n      scheduleEndDate: \"2024-02-24\",\n      actualBeginDate: \"2023-06-05\",\n      actualEndDate: \"2023-07-28\",\n      stageCode: \"\",\n      completedPercent: 31,\n      scheduleRemark: \"\",\n      fileIds: null,\n      businessCode: null\n    }, {\n      //有实际结束   实际开始在计划之后（显示） j21\n      id: \"7086894358431006720\",\n      nbProjectId: \"7086894357860581376\",\n      projectVesselId: \"7086894358300983296\",\n      vesselNameCn: \"凯勇\",\n      vesselNameEn: \"NEW VALOR\",\n      parentId: \"0\",\n      dispNo: 2,\n      scheduleNameCn: \"开工\",\n      scheduleNameEn: \"Start\",\n      scheduleBeginDate: \"2023-07-01\",\n      scheduleEndDate: \"2023-08-24\",\n      actualBeginDate: \"2023-07-10\",\n      actualEndDate: \"2023-09-28\",\n      stageCode: \"VESSEL_SCHEDULE_2\",\n      completedPercent: 6,\n      scheduleRemark: null,\n      fileIds: null,\n      businessCode: null\n    }, {\n      //有实际结束   实际开始(相等于计划开始)在计划之后（显示） \"b21\"\n      id: \"7088384223853150208\",\n      nbProjectId: \"7086894357860581376\",\n      projectVesselId: \"7086894358300983296\",\n      vesselNameCn: \"凯勇\",\n      vesselNameEn: \"NEW VALOR\",\n      parentId: \"7086894358431006720\",\n      dispNo: null,\n      scheduleNameCn: \"加工\",\n      scheduleNameEn: \"Steel Fabrication\",\n      scheduleBeginDate: \"2023-07-01\",\n      scheduleEndDate: \"2023-08-24\",\n      actualBeginDate: \"2023-07-01\",\n      actualEndDate: \"2023-12-28\",\n      stageCode: \"\",\n      completedPercent: 6,\n      scheduleRemark: \"\",\n      fileIds: null,\n      businessCode: null\n    }, {\n      ///有实际结束   对应相等\n      id: \"7088384248909922304\",\n      nbProjectId: \"7086894357860581376\",\n      projectVesselId: \"7086894358300983296\",\n      vesselNameCn: \"凯勇\",\n      vesselNameEn: \"NEW VALOR\",\n      parentId: \"7086894358431006720\",\n      dispNo: null,\n      scheduleNameCn: \"完善\",\n      scheduleNameEn: \"Steel Fabrication\",\n      scheduleBeginDate: \"2023-07-01\",\n      scheduleEndDate: \"2023-08-24\",\n      actualBeginDate: \"2023-07-01\",\n      actualEndDate: \"2023-08-24\",\n      stageCode: \"\",\n      completedPercent: 6,\n      scheduleRemark: \"\",\n      fileIds: null,\n      businessCode: null\n    }, {\n      //有实际结束   计划 包含实际 \"b12\"\n      id: \"7086894358472949760\",\n      nbProjectId: \"7086894357860581376\",\n      projectVesselId: \"7086894358300983296\",\n      vesselNameCn: \"凯勇\",\n      vesselNameEn: \"NEW VALOR\",\n      parentId: \"0\",\n      dispNo: 3,\n      scheduleNameCn: \"审核\",\n      scheduleNameEn: \"Keel\",\n      scheduleBeginDate: \"2023-08-01\",\n      scheduleEndDate: \"2024-08-24\",\n      actualBeginDate: \"2023-08-28\",\n      actualEndDate: \"2023-12-24\",\n      stageCode: \"VESSEL_SCHEDULE_3\",\n      completedPercent: 0,\n      scheduleRemark: null,\n      fileIds: null,\n      businessCode: null\n    }, {\n      //没有实际   计划 包含实际 b12\n      id: \"7086894358485532672\",\n      nbProjectId: \"7086894357860581376\",\n      projectVesselId: \"7086894358300983296\",\n      vesselNameCn: \"凯勇\",\n      vesselNameEn: \"NEW VALOR\",\n      parentId: \"0\",\n      dispNo: 4,\n      scheduleNameCn: \"试用\",\n      scheduleNameEn: \"Launch\",\n      scheduleBeginDate: \"2023-08-01\",\n      scheduleEndDate: \"2024-08-24\",\n      actualBeginDate: null,\n      actualEndDate: null,\n      stageCode: \"VESSEL_SCHEDULE_4\",\n      completedPercent: 0,\n      scheduleRemark: null,\n      fileIds: null,\n      businessCode: null\n    }, {\n      //有实际   实际开始  大于   计划开始 b121\n      id: \"7086894358502309888\",\n      nbProjectId: \"7086894357860581376\",\n      projectVesselId: \"7086894358300983296\",\n      vesselNameCn: \"凯勇\",\n      vesselNameEn: \"NEW VALOR\",\n      parentId: \"0\",\n      dispNo: 5,\n      scheduleNameCn: \"交付\",\n      scheduleNameEn: \"Voyage\",\n      scheduleBeginDate: \"2023-08-01\",\n      scheduleEndDate: \"2024-08-24\",\n      actualBeginDate: \"2023-08-28\",\n      actualEndDate: null,\n      stageCode: \"VESSEL_SCHEDULE_5\",\n      completedPercent: 0,\n      scheduleRemark: null,\n      fileIds: null,\n      businessCode: null\n    }, {\n      //没有相交时间  实际在后  l12\n      id: \"7086894358544252928\",\n      nbProjectId: \"7086894357860581376\",\n      projectVesselId: \"7086894358300983296\",\n      vesselNameCn: \"凯勇\",\n      vesselNameEn: \"NEW VALOR\",\n      parentId: \"0\",\n      dispNo: 6,\n      scheduleNameCn: \"使用中\",\n      scheduleNameEn: \"Delivery\",\n      scheduleBeginDate: \"2023-05-01\",\n      scheduleEndDate: \"2023-06-24\",\n      actualBeginDate: \"2023-08-28\",\n      actualEndDate: \"2024-10-28\",\n      stageCode: \"VESSEL_SCHEDULE_6\",\n      completedPercent: 0,\n      scheduleRemark: null,\n      fileIds: null,\n      businessCode: null\n    }, {\n      //没有相交时间  实际在前  l21\n      id: \"70868943585442529288948\",\n      nbProjectId: \"7086894357860581376\",\n      projectVesselId: \"7086894358300983296\",\n      vesselNameCn: \"凯勇\",\n      vesselNameEn: \"NEW VALOR\",\n      parentId: \"0\",\n      dispNo: 6,\n      scheduleNameCn: \"反馈\",\n      scheduleNameEn: \"Delivery\",\n      scheduleBeginDate: \"2023-12-01\",\n      scheduleEndDate: \"2024-06-24\",\n      actualBeginDate: \"2023-08-28\",\n      actualEndDate: \"2023-10-28\",\n      stageCode: \"VESSEL_SCHEDULE_6\",\n      completedPercent: 0,\n      scheduleRemark: null,\n      fileIds: null,\n      businessCode: null\n    }, {\n      //两端超出  l12s\n      id: \"7086894358544252928894887478\",\n      nbProjectId: \"7086894357860581376\",\n      projectVesselId: \"7086894358300983296\",\n      vesselNameCn: \"凯勇\",\n      vesselNameEn: \"NEW VALOR\",\n      parentId: \"0\",\n      dispNo: 6,\n      scheduleNameCn: \"结项\",\n      scheduleNameEn: \"Delivery\",\n      scheduleBeginDate: \"2023-8-01\",\n      scheduleEndDate: \"2023-10-24\",\n      actualBeginDate: \"2023-06-28\",\n      actualEndDate: \"2023-12-28\",\n      stageCode: \"VESSEL_SCHEDULE_6\",\n      completedPercent: 0,\n      scheduleRemark: null,\n      fileIds: null,\n      businessCode: null\n    }];\n    let currentDate = new Date();\n    let year = currentDate.getFullYear();\n    let month = String(currentDate.getMonth() + 1).padStart(2, \"0\");\n    let day = String(currentDate.getDate()).padStart(2, \"0\");\n    let formattedDate = `${year}-${month}-${day}`;\n    console.log('formattedDate', formattedDate);\n    this.initData(arr);\n    gantt.config.show_progress = false;\n    gantt.config.open_tree_initially = true; //默认展开子级\n    // 设置左侧树子任务缩进和展开\n    gantt.config.indent = 30;\n    gantt.config.grid_width = 350;\n    gantt.config.open_tree_initially = true;\n    function percenToString(num) {\n      return Math.floor(num * 100) + \"%\";\n    }\n\n    // 设置每一部分的颜色\n    function renderLabel(progress, type, state, px, block, leftpx, falge) {\n      var relWidth = progress * 100;\n      var cssClass = \"custom_progress \";\n      if (type === 1) {\n        cssClass += \"nearly_done\";\n      } else if (type === 2) {\n        if (state) {\n          cssClass += \"in_progress\";\n        } else {\n          cssClass += \"in_progress_w\";\n        }\n      } else if (type === 3) {\n        cssClass += \"tshu\";\n      } else {\n        cssClass += \"idle\";\n      }\n      return \"<div class='\" + cssClass + \"' style='width:\" + relWidth + `%;height:25%;display:${block ? \"block\" : \"inline-block\"};margin-top:${px}px;margin-left:${leftpx * 100}%;display:${falge}'>` + \"</div>\";\n    }\n    // 根据定义类型判断颜色顺序\n    gantt.templates.task_text = function (start, end, task) {\n      let colorType = task.colorType;\n      if (colorType === \"j12\" || colorType === \"one\") {\n        return renderLabel(task.progress1 + task.progress2, 1, task.state, 0, true, 0) + renderLabel(task.progress2, 3, task.state, -8, true, task.progress2) + renderLabel(task.progress3 + task.progress2, 2, task.state, 10, false, task.progress1);\n      } else if (colorType === \"j21\") {\n        return renderLabel(task.progress1 + task.progress2, 3, task.state, 0, true, 0) + renderLabel(task.progress2 + task.progress1, 2, task.state, 15, true, 0) + renderLabel(task.progress3 + task.progress2, 1, task.state, -30, false, task.progress2);\n      } else if (colorType === \"b121\") {\n        return renderLabel(task.progress1 + task.progress2, 1, task.state, 0, true, 0, 'block') + renderLabel(task.progress2, 2, task.state, 15, true, task.progress1, 'none') + renderLabel(task.progress3 + task.progress2, 1, task.state, -38, false, task.progress2, 'none');\n      } else if (colorType === \"b121s\") {\n        return renderLabel(task.progress1 + task.progress2, 1, task.state, 0, true, 0, 'block') + renderLabel(task.progress2, 2, task.state, 15, true, task.progress1, 'none') + renderLabel(task.progress3 + task.progress2, 1, task.state, -38, false, task.progress2, 'none');\n      } else if (colorType === \"b12\") {\n        if (task.actualStart == null) {\n          return renderLabel(task.progress3 + task.progress2 + task.progress1, 1, task.state, 0, true, 0, 'block') + renderLabel(task.progress2, 2, task.state, 15, true, task.progress1, 'none') + renderLabel(task.progress1 + task.progress2, 1, task.state, -38, false, task.progress2, 'block');\n        } else {\n          return renderLabel(task.progress3 + task.progress2 + task.progress1, 1, task.state, 0, true, 0, 'block') + renderLabel(task.progress2, 2, task.state, 15, true, task.progress1, 'block') + renderLabel(task.progress1 + task.progress2, 1, task.state, -38, false, task.progress2, 'block');\n        }\n      } else if (colorType === \"b21\") {\n        return renderLabel(task.progress2, 1, task.state, 0, true, task.progress1) + renderLabel(1 - task.progress2, 3, task.state, -8, true, task.progress2, 'block') + renderLabel(task.progress2 + task.progress3, 2, task.state, 10, false, 0);\n      } else if (colorType === \"l12\") {\n        return renderLabel(task.progress1, 1, task.state, 0, true, 0) + renderLabel(task.progress3, 2, task.state, 15, true, task.progress2 + task.progress1) + renderLabel(1, 3, task.state, -30, false, task.progress1);\n      } else if (colorType === \"l21\") {\n        return renderLabel(task.progress3, 1, task.state, 0, true, task.progress1 + task.progress2) + renderLabel(task.progress1, 2, task.state, 15, true, 0) + renderLabel(task.progress2 + task.progress1, 3, task.state, -30, true, 0);\n      } else if (colorType === \"l12s\") {\n        return renderLabel(task.progress3, 1, task.state, 0, true, task.progress1 - task.progress2) + renderLabel(task.progress1, 2, task.state, 15, true, 0) + renderLabel(task.progress1 - task.progress2, 3, task.state, -30, true, 0) + renderLabel(task.progress1 - task.progress3, 3, task.state, -8, true, task.progress1 - task.progress2 + task.progress3);\n      } else if (colorType === \"ts12\") {\n        return (\n          // renderLabel(task.progress1, 1, task.state) +\n          // renderLabel(task.progress2, 2, task.state) +\n          renderLabel(task.progress1 + task.progress2, 1, task.state, 0, false, 0)\n        );\n      } else if (colorType == \"ts13\") {\n        renderLabel(task.progress1 + task.progress2, 1, task.state) + renderLabel(task.progress2, 2, task.state) + renderLabel(task.progress1 + task.progress2, 1, task.state, 0, false, 0);\n      } else {\n        return renderLabel(task.progress1 + task.progress2, 1, task.state, 0, true, 0) + renderLabel(task.progress2, 2, task.state, 15, true, task.progress2) + renderLabel(task.progress3 + task.progress2, 3, task.state, -38, false, task.progress2);\n      }\n    };\n    gantt.plugins({\n      marker: true,\n      tooltip: true\n    }); // 开启marker插件\n    var dateToStr = gantt.date.date_to_str(gantt.config.task_date);\n    var today = new Date();\n    // 添加固定时间线\n    gantt.addMarker({\n      start_date: today,\n      css: \"today\",\n      text: \"今日:\" + moment(new Date()).format(\"YYYY-MM-DD\"),\n      title: \"Today: \" + dateToStr(today)\n    });\n    // 提示框内容\n    gantt.templates.tooltip_text = function (start, end, task) {\n      return \"<b>任务内容:</b>\" + task.text + \"<br/><b>计划开始:</b> \" + task.planStart + \"<br/><b>计划结束:</b> \" + task.planEnd + \"<br/><b>实际开始:</b> \" + task.actualStart + \"<br/><b>实际结束:</b> \" + task.actualEnd;\n    };\n    gantt.config.scale_unit = \"year\";\n    gantt.config.step = 1;\n    gantt.config.date_scale = \"%Y\";\n    //当右侧不止显示年份时，可以添加展示月日，添加一个就加一行\n    gantt.config.subscales = [{\n      unit: \"month\",\n      step: 1,\n      date: \"%m\"\n    }];\n    //甘特图右侧表头的高度\n    gantt.config.scale_height = 80;\n    //使用中文\n    gantt.i18n.setLocale(\"cn\");\n    //自适应甘特图的尺寸大小, 使得在不出现滚动条的情况下, 显示全部任务\n    gantt.config.autosize = true;\n    //只读模式\n    gantt.config.readonly = true;\n    //是否显示左侧树表格\n    gantt.config.show_grid = true;\n    //表格列设置\n    gantt.config.columns = [{\n      name: \"text\",\n      label: \"任务内容\",\n      width: \"120\",\n      align: \"center\",\n      tree: true\n    }, {\n      name: \"planStart\",\n      label: \"计划开始\",\n      width: \"100\",\n      align: \"center\"\n    }, {\n      name: \"planEnd\",\n      label: \"计划结束\",\n      width: \"100\",\n      align: \"center\"\n    }, {\n      name: \"actualStart\",\n      label: \"实际开始\",\n      width: \"100\",\n      align: \"center\"\n    }, {\n      name: \"actualEnd\",\n      label: \"实际结束\",\n      width: \"100\",\n      align: \"center\"\n    }];\n    //任务条上的文字大小 以及取消border自带样式\n    gantt.templates.task_class = function () {\n      return \"firstLevelTask\";\n    };\n\n    // 初始化\n    gantt.init(this.$refs.gantt);\n    // 数据解析\n    console.log(\"mounted\", this.tasks);\n    gantt.parse(this.tasks);\n    let ziji = document.querySelectorAll(\".gantt_cell\");\n    console.log(\"ziji\", ziji);\n  },\n  methods: {\n    undapta() {},\n    initData(data) {\n      // 处理数据\n      let sucdate = data;\n      sucdate.map((item, index) => {\n        item.task = item.scheduleNameCn;\n        item.taskEn = item.scheduleNameEn;\n        item.planStart = item.scheduleBeginDate;\n        item.planEnd = item.scheduleEndDate;\n        item.actualStart = item.actualBeginDate;\n        item.actualEnd = item.actualEndDate;\n        item.parent = item.parentId;\n      });\n      let arr = sucdate;\n      let newArr = [];\n      arr.forEach((item, index) => {\n        let obj = this.getDate(item.planStart, item.planEnd, item.actualStart, item.actualEnd);\n        newArr.push({\n          id: item.id,\n          text: item.task,\n          textEn: item.taskEn,\n          start_date: new Date(moment(obj.minTime).format(\"YYYY-MM-DD\")),\n          end_date: new Date(moment(obj.maxTime).format(\"YYYY-MM-DD\")),\n          progress1: Math.abs(obj.progress1),\n          progress2: Math.abs(obj.progress2),\n          progress3: Math.abs(obj.progress3),\n          duration: obj.duration,\n          planStart: item.planStart,\n          planEnd: item.planEnd,\n          actualStart: item.actualStart,\n          actualEnd: item.actualEnd,\n          state: obj.state,\n          colorType: obj.colorType,\n          parent: item.parent\n        });\n      });\n      gantt.clearAll();\n      this.tasks.data = newArr;\n      console.log(\"newarrrrrr\", newArr);\n      // 初始化\n      gantt.init(this.$refs.gantt);\n      // 数据解析\n      gantt.parse(this.tasks);\n    },\n    expandAllTasks() {\n      gantt.eachTask(task => {\n        gantt.open(task.id);\n      });\n    },\n    getDate(Atime, Btime, Ctime, Dtime) {\n      let obj = {};\n      let currentDate = new Date();\n      let year = currentDate.getFullYear();\n      let month = String(currentDate.getMonth() + 1).padStart(2, \"0\");\n      let day = String(currentDate.getDate()).padStart(2, \"0\");\n      let formattedDate = `${year}-${month}-${day}`;\n      let arr = [Atime == null ? Atime = formattedDate : Atime, Btime == null ? Btime = formattedDate : Btime, Ctime == null ? (Ctime = Atime, Dtime = Btime) : Ctime, Dtime == null ? Dtime = Btime : Dtime];\n      let timeArr = [];\n      arr.forEach(item => {\n        timeArr.push(new Date(item));\n      });\n      let minTime = moment(Math.min(...timeArr)).format(\"MM-DD-YYYY\");\n      let maxTime = moment(Math.max(...timeArr)).format(\"YYYY-MM-DD\");\n      let duration = this.difference(minTime, maxTime);\n      let progress1 = 0;\n      let progress2 = 0;\n      let progress3 = 0;\n      let state = true;\n      let colorType = true;\n      if (Atime < Ctime && Ctime < Btime && Btime < Dtime) {\n        // console.log('12相交', index)\n        colorType = \"j12\";\n        progress2 = this.difference(Ctime, Btime) / duration;\n        progress1 = this.difference(Atime, Ctime) / duration;\n        progress3 = this.difference(Btime, Dtime) / duration;\n      } else if (Ctime > Atime && Btime == Dtime) {\n        // console.log('1包含2', index)\n        colorType = \"b121\";\n        state = true;\n        progress2 = this.difference(Ctime, Dtime) / duration;\n        progress1 = this.difference(Atime, Ctime) / duration;\n        progress3 = this.difference(Dtime, Btime) / duration;\n      } else if (Atime > Ctime && Dtime == Btime) {\n        colorType = \"b121s\";\n        state = true;\n        progress2 = this.difference(Atime, Btime) / duration;\n        progress1 = this.difference(Ctime, Atime) / duration;\n        progress3 = this.difference(Btime, Dtime) / duration;\n      } else if (Btime > Ctime && Btime >= Dtime && Ctime >= Atime && Dtime > Atime) {\n        // console.log('1包含2', index)\n        colorType = \"b12\";\n        state = true;\n        progress2 = this.difference(Ctime, Dtime) / duration;\n        progress1 = this.difference(Atime, Ctime) / duration;\n        progress3 = this.difference(Dtime, Btime) / duration;\n      } else if (Dtime >= Btime && Dtime > Atime && Atime == Ctime && Btime > Ctime) {\n        // console.log('2包含1', index)\n        colorType = \"b21\";\n        state = true;\n        progress2 = this.difference(Atime, Btime) / duration;\n        progress1 = this.difference(Ctime, Atime) / duration;\n        progress3 = this.difference(Btime, Dtime) / duration;\n      } else if (Btime > Dtime && Dtime > Atime && Atime > Ctime) {\n        // console.log('21相交', index)\n        colorType = \"j21\";\n        state = true;\n        progress2 = this.difference(Atime, Dtime) / duration;\n        progress1 = this.difference(Ctime, Atime) / duration;\n        progress3 = this.difference(Dtime, Btime) / duration;\n      } else if (Btime < Ctime) {\n        // console.log('12相离')\n        colorType = \"l12\";\n        state = true;\n        progress2 = this.difference(Btime, Ctime) / duration;\n        progress1 = this.difference(Atime, Btime) / duration;\n        progress3 = this.difference(Ctime, Dtime) / duration;\n      } else if (Dtime > Btime && Atime > Ctime) {\n        colorType = \"l12s\";\n        state = true;\n        progress2 = this.difference(Dtime, Atime) / duration;\n        progress3 = this.difference(Atime, Btime) / duration;\n        progress1 = this.difference(Ctime, Dtime) / duration;\n      } else if (Dtime < Atime) {\n        // console.log('21相离')\n        colorType = \"l21\";\n        state = true;\n        progress2 = this.difference(Dtime, Atime) / duration;\n        progress3 = this.difference(Atime, Btime) / duration;\n        progress1 = this.difference(Ctime, Dtime) / duration;\n      } else if (Dtime == Btime && Ctime == Atime) {\n        colorType = \"ts12\";\n        // colorType = \"l21\";\n        state = false;\n        progress2 = this.difference(Btime, Atime) / duration;\n        progress3 = this.difference(Atime, Btime) / duration;\n        progress1 = this.difference(Btime, Atime) / duration;\n      } else if (Dtime > Btime) {\n        colorType = \"ts13\";\n        // colorType = \"l21\";\n        state = true;\n        progress2 = this.difference(Atime, Btime) / duration;\n        progress1 = this.difference(Ctime, Atime) / duration;\n        progress3 = this.difference(Btime, Dtime) / duration;\n      } else {\n        colorType = \"one\";\n        console.log(\"状态错误\");\n      }\n      obj = {\n        state: state,\n        minTime: minTime,\n        maxTime: maxTime,\n        duration: duration * 1,\n        progress1: progress1 * 1,\n        progress2: progress2 * 1,\n        progress3: progress3 * 1,\n        colorType: colorType\n      };\n      return obj;\n    },\n    difference(beginTime, Dtime) {\n      var dateBegin = new Date(beginTime);\n      var dateEnd = new Date(Dtime);\n      var dateDiff = dateEnd.getTime() - dateBegin.getTime(); //时间差的毫秒数\n      var dayDiff = Math.floor(dateDiff / (24 * 3600 * 1000)); //计算出相差天数\n      return dayDiff;\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}