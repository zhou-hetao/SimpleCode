{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"dhtmlx-gantt/codebase/dhtmlxgantt.css\";\nimport gantt from \"dhtmlx-gantt/codebase/dhtmlxgantt.js\";\nexport default {\n  name: \"GanttComponent\",\n  data() {\n    return {\n      tasks: {\n        data: [{\n          id: 1,\n          title: \"一号里程碑\",\n          text: \"一号里程碑\",\n          start_date: \"2023-06-24 00:00\",\n          end_date: \"2023-07-28\",\n          prottiem: \"2023-06-24 00:00\",\n          propedtime: \"2023-09-28\",\n          open: true,\n          status: \"进行中\"\n        }, {\n          id: 2,\n          title: \"一号z里程碑\",\n          text: \"一号z里程碑\",\n          start_date: \"2023-06-24 00:00\",\n          end_date: \"2023-08-28\",\n          prottiem: \"2023-06-24 00:00\",\n          propedtime: \"2023-09-28\",\n          open: true,\n          parent: 1,\n          status: \"进行中\"\n        }]\n      }\n    };\n  },\n  mounted() {\n    gantt.i18n.setLocale(\"cn\");\n    gantt.config.columns = [\n    // 原始列\n    {\n      name: \"title\",\n      label: \"里程碑\",\n      width: \"*\",\n      tree: true\n    }, {\n      name: \"start_date\",\n      label: \"开始日期\",\n      align: \"center\",\n      width: 100\n    }, {\n      name: \"status\",\n      label: \"里程碑状态\",\n      width: 100\n    }];\n    gantt.templates.task_class = function (start, end, task) {\n      if (task.planned_end) {\n        return classes.join('class-name');\n      }\n    };\n    this.ganttConfig();\n    gantt.parse(this.tableData);\n  },\n  methods: {\n    // 甘特图配置\n    ganttConfig() {\n      gantt.config.date_format = '%Y-%m-%d %H:%i:%s';\n      // gantt图布局设计 本例使用_scrollable_grid布局，方便多时间跨度查看\n      gantt.config.layout = {\n        css: 'gantt_container',\n        cols: [{\n          width: 500,\n          min_width: 300,\n          rows: [{\n            view: 'grid',\n            scrollX: 'gridScroll',\n            scrollable: true,\n            scrollY: 'scrollVer'\n          }, {\n            view: 'scrollbar',\n            id: 'gridScroll',\n            group: 'horizontal'\n          }]\n        }, {\n          resizer: true,\n          width: 1\n        }, {\n          // width: 950,\n          // min_width: 600,\n          rows: [{\n            view: 'timeline',\n            scrollX: 'scrollHor',\n            scrollable: true,\n            scrollY: 'scrollVer'\n          }, {\n            view: 'scrollbar',\n            id: 'scrollHor',\n            group: 'horizontal'\n          }]\n        }, {\n          view: 'scrollbar',\n          id: 'scrollVer'\n        }]\n      };\n      gantt.config.task_height = 16;\n      gantt.config.row_height = 40;\n      gantt.config.auto_scheduling = true;\n      // 网络图部分表头格式化\n      gantt.config.scales = [{\n        unit: 'year',\n        step: 1,\n        date: '%Y年'\n      }, {\n        unit: 'month',\n        step: 1,\n        date: '%m月'\n      }];\n      gantt.config.min_column_width = 50;\n      // 表头高度\n      gantt.config.scale_height = 48;\n      // gantt task\n      // adding baseline display\n      // 该方法用于添加甘特图baseline，即【绘制计划时间】\n      this.ganttTask();\n      // 只读模式\n      gantt.config.readonly = true;\n\n      // 默认是否展开树结构\n      gantt.config.open_tree_initially = false;\n      // grid 列表配置 上段代码即是\n      gantt.config.columns = this.columns;\n      // 如果时间跨度很长，则使用此配置可用于显著加快图表显示速度。\n      gantt.config.smart_scales = true;\n      // 启用/禁用在图表区域中显示列边框\n      gantt.config.show_task_cells = true;\n      // 甘特图以自动扩展时间范围，以适应所有显示的任务\n      gantt.config.fit_tasks = true;\n      // 是否调用模版方法渲染source时间轴的空白元素\n      gantt.config.resource_render_empty_cells = true;\n      gantt.init('gantt_here_master');\n      gantt.parse(this.tableData);\n      this.ganttTask();\n      gantt.refreshData();\n    },\n    // 该方法用于添加甘特图baseline，即【绘制计划时间】\n    // adding baseline display\n    ganttTask() {\n      gantt.addTaskLayer({\n        renderer: {\n          render: function draw_planned(task) {\n            if (task.planned_start && task.planned_end) {\n              var sizes = gantt.getTaskPosition(task, task.planned_start, task.planned_end);\n              var el = document.createElement('div');\n              if (task.pending) {\n                el.className = 'baseline pending-gantt';\n              } else {\n                el.className = 'baseline';\n              }\n              el.style.left = sizes.left + 'px';\n              el.style.width = sizes.width + 'px';\n              el.style.top = sizes.top + gantt.config.task_height + 13 + 'px';\n              return el;\n            }\n            return false;\n          },\n          // define getRectangle in order to hook layer with the smart rendering\n          getRectangle: function (task, view) {\n            if (task.planned_start && task.planned_end) {\n              return gantt.getTaskPosition(task, task.planned_start, task.planned_end);\n            }\n            return null;\n          }\n        }\n      });\n      gantt.templates.task_class = function (start, end, task) {\n        if (task.planned_end) {\n          var classes = ['has-baseline'];\n          if (end.getTime() > task.planned_end.getTime()) {\n            classes.push('overdue');\n          }\n          return classes.join(' ');\n        }\n      };\n      gantt.attachEvent('onTaskLoading', function (task) {\n        task.planned_start = gantt.date.parseDate(task.planned_start, 'xml_date');\n        task.planned_end = gantt.date.parseDate(task.planned_end, 'xml_date');\n        return true;\n      });\n      gantt.config.lightbox.sections = [\n      // { name: 'time', map_to: 'auto', type: 'duration' },\n      {\n        name: 'baseline',\n        map_to: {\n          start_date: 'planned_start',\n          end_date: 'planned_end'\n        },\n        button: true,\n        type: 'duration_optional'\n      }];\n      gantt.locale.labels.section_baseline = 'Planned';\n    }\n  }\n};","map":{"version":3,"names":["gantt","name","data","tasks","id","title","text","start_date","end_date","prottiem","propedtime","open","status","parent","mounted","i18n","setLocale","config","columns","label","width","tree","align","templates","task_class","start","end","task","planned_end","classes","join","ganttConfig","parse","tableData","methods","date_format","layout","css","cols","min_width","rows","view","scrollX","scrollable","scrollY","group","resizer","task_height","row_height","auto_scheduling","scales","unit","step","date","min_column_width","scale_height","ganttTask","readonly","open_tree_initially","smart_scales","show_task_cells","fit_tasks","resource_render_empty_cells","init","refreshData","addTaskLayer","renderer","render","draw_planned","planned_start","sizes","getTaskPosition","el","document","createElement","pending","className","style","left","top","getRectangle","getTime","push","attachEvent","parseDate","lightbox","sections","map_to","button","type","locale","labels","section_baseline"],"sources":["src/components/Gantt/Gantetu.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div ref=\"gantt\" style=\"width: 100%; height: 500px\"></div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport \"dhtmlx-gantt/codebase/dhtmlxgantt.css\";\r\nimport gantt from \"dhtmlx-gantt/codebase/dhtmlxgantt.js\";\r\nexport default {\r\n  name: \"GanttComponent\",\r\n  data() {\r\n    return {\r\n      tasks: {\r\n        data: [\r\n          {\r\n            id: 1,\r\n            title: \"一号里程碑\",\r\n            text: \"一号里程碑\",\r\n            start_date: \"2023-06-24 00:00\",\r\n            end_date: \"2023-07-28\",\r\n            prottiem: \"2023-06-24 00:00\",\r\n            propedtime: \"2023-09-28\",\r\n            open: true,\r\n            status: \"进行中\",\r\n          },\r\n          {\r\n            id: 2,\r\n            title: \"一号z里程碑\",\r\n            text: \"一号z里程碑\",\r\n            start_date: \"2023-06-24 00:00\",\r\n            end_date: \"2023-08-28\",\r\n            prottiem: \"2023-06-24 00:00\",\r\n            propedtime: \"2023-09-28\",\r\n            open: true,\r\n            parent: 1,\r\n            status: \"进行中\",\r\n          },\r\n        ],\r\n      },\r\n    };\r\n  },\r\n  mounted() {\r\n    gantt.i18n.setLocale(\"cn\");\r\n    gantt.config.columns = [\r\n      // 原始列\r\n      { name: \"title\", label: \"里程碑\", width: \"*\", tree: true },\r\n      { name: \"start_date\", label: \"开始日期\", align: \"center\", width: 100 },\r\n      { name: \"status\", label: \"里程碑状态\", width: 100 },\r\n    ];\r\n    gantt.templates.task_class = function (start, end, task) {\r\n        if (task.planned_end) {\r\n          return classes.join('class-name')\r\n        }\r\n      }\r\n  this.ganttConfig()\r\n  gantt.parse(this.tableData)\r\n  },\r\n  methods:{\r\n    \t// 甘特图配置\r\n      ganttConfig() {\r\n      gantt.config.date_format = '%Y-%m-%d %H:%i:%s'\r\n      // gantt图布局设计 本例使用_scrollable_grid布局，方便多时间跨度查看\r\n      gantt.config.layout = {\r\n        css: 'gantt_container',\r\n        cols: [\r\n          {\r\n            width: 500,\r\n            min_width: 300,\r\n            rows: [\r\n              {\r\n                view: 'grid',\r\n                scrollX: 'gridScroll',\r\n                scrollable: true,\r\n                scrollY: 'scrollVer'\r\n              },\r\n              { view: 'scrollbar', id: 'gridScroll', group: 'horizontal' }\r\n            ]\r\n          },\r\n          { resizer: true, width: 1 },\r\n          {\r\n            // width: 950,\r\n            // min_width: 600,\r\n            rows: [\r\n              {\r\n                view: 'timeline',\r\n                scrollX: 'scrollHor',\r\n                scrollable: true,\r\n                scrollY: 'scrollVer'\r\n              },\r\n              { view: 'scrollbar', id: 'scrollHor', group: 'horizontal' }\r\n            ]\r\n          },\r\n          { view: 'scrollbar', id: 'scrollVer' }\r\n        ]\r\n      }\r\n\r\n      gantt.config.task_height = 16\r\n      gantt.config.row_height = 40\r\n      gantt.config.auto_scheduling = true\r\n      // 网络图部分表头格式化\r\n      gantt.config.scales = [\r\n        { unit: 'year', step: 1, date: '%Y年' },\r\n        { unit: 'month', step: 1, date: '%m月' }\r\n      ]\r\n\r\n      gantt.config.min_column_width = 50\r\n      // 表头高度\r\n      gantt.config.scale_height = 48\r\n      // gantt task\r\n      // adding baseline display\r\n      // 该方法用于添加甘特图baseline，即【绘制计划时间】\r\n      this.ganttTask()\r\n      // 只读模式\r\n      gantt.config.readonly = true\r\n\r\n      // 默认是否展开树结构\r\n      gantt.config.open_tree_initially = false\r\n\t  // grid 列表配置 上段代码即是\r\n      gantt.config.columns = this.columns\r\n      // 如果时间跨度很长，则使用此配置可用于显著加快图表显示速度。\r\n      gantt.config.smart_scales = true\r\n\t  // 启用/禁用在图表区域中显示列边框\r\n      gantt.config.show_task_cells = true\r\n      // 甘特图以自动扩展时间范围，以适应所有显示的任务\r\n      gantt.config.fit_tasks = true\r\n      // 是否调用模版方法渲染source时间轴的空白元素\r\n      gantt.config.resource_render_empty_cells = true\r\n\r\n      gantt.init('gantt_here_master')\r\n      gantt.parse(this.tableData)\r\n      this.ganttTask()\r\n      gantt.refreshData()\r\n    },\r\n    // 该方法用于添加甘特图baseline，即【绘制计划时间】\r\n    // adding baseline display\r\n    ganttTask() {\r\n      gantt.addTaskLayer({\r\n        renderer: {\r\n          render: function draw_planned(task) {\r\n            if (task.planned_start && task.planned_end) {\r\n              var sizes = gantt.getTaskPosition(\r\n                task,\r\n                task.planned_start,\r\n                task.planned_end\r\n              )\r\n              var el = document.createElement('div')\r\n              if (task.pending) {\r\n                el.className = 'baseline pending-gantt'\r\n              } else {\r\n                el.className = 'baseline'\r\n              }\r\n              el.style.left = sizes.left + 'px'\r\n              el.style.width = sizes.width + 'px'\r\n              el.style.top = sizes.top + gantt.config.task_height + 13 + 'px'\r\n              return el\r\n            }\r\n            return false\r\n          },\r\n          // define getRectangle in order to hook layer with the smart rendering\r\n          getRectangle: function (task, view) {\r\n            if (task.planned_start && task.planned_end) {\r\n              return gantt.getTaskPosition(\r\n                task,\r\n                task.planned_start,\r\n                task.planned_end\r\n              )\r\n            }\r\n            return null\r\n          }\r\n        }\r\n      })\r\n      gantt.templates.task_class = function (start, end, task) {\r\n        if (task.planned_end) {\r\n          var classes = ['has-baseline']\r\n          if (end.getTime() > task.planned_end.getTime()) {\r\n            classes.push('overdue')\r\n          }\r\n          return classes.join(' ')\r\n        }\r\n      }\r\n\r\n      gantt.attachEvent('onTaskLoading', function (task) {\r\n        task.planned_start = gantt.date.parseDate(\r\n          task.planned_start,\r\n          'xml_date'\r\n        )\r\n        task.planned_end = gantt.date.parseDate(task.planned_end, 'xml_date')\r\n        return true\r\n      })\r\n      gantt.config.lightbox.sections = [\r\n        // { name: 'time', map_to: 'auto', type: 'duration' },\r\n        {\r\n          name: 'baseline',\r\n          map_to: { start_date: 'planned_start', end_date: 'planned_end' },\r\n          button: true,\r\n          type: 'duration_optional'\r\n        }\r\n      ]\r\n      gantt.locale.labels.section_baseline = 'Planned'\r\n    }\r\n  }\r\n  \r\n};\r\n</script>\r\n<style lang=\"scss\" scoped>\r\n.gantt-container-right {\r\n  width: 60%;\r\n  height: 100%;\r\n  float: left;\r\n  overflow-y: auto;\r\n}\r\n.gantt-bar-label {\r\n  width: 100px;\r\n  height: 50px;\r\n  color: #fff;\r\n  font-size: 12px;\r\n  text-align: center;\r\n  padding: 2px;\r\n  background-color: #007bff;\r\n  border-radius: 4px;\r\n\r\n}\r\n\r\n.long {\r\n  background-color: #dc3545;\r\n}\r\n\r\n.short {\r\n  background-color: #28a745;\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}