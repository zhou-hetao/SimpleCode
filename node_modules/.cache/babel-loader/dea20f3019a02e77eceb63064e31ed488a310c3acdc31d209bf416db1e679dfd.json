{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport gantt from 'dhtmlx-gantt';\nimport 'dhtmlx-gantt/codebase/dhtmlxgantt.css';\nimport moment from 'moment';\nexport default {\n  name: 'resourcePlan',\n  components: {\n    resoureceDetail\n  },\n  data() {\n    return {\n      //甘特图\n      params: {\n        deptIds: [],\n        startDate: '',\n        endDate: '',\n        searchValue: '',\n        conditions: []\n      },\n      htmlUrl: '',\n      // 甘特图数据格式\n      dataSource: [],\n      ganttHeight: innerHeight - 215 + 'px',\n      ganttLoading: false,\n      dialogVisible: false,\n      priorityOptions: [{\n        key: '1',\n        label: '编制报告',\n        backgroundColor: '#BD3124',\n        textColor: '#FFF'\n      }, {\n        key: '2',\n        label: '准备进场新项目',\n        backgroundColor: '#BD3124',\n        textColor: '#FFF'\n      }, {\n        key: '3',\n        label: '请假休整',\n        backgroundColor: '#81B336',\n        textColor: '#FFF'\n      }, {\n        key: '4',\n        label: '其他',\n        backgroundColor: '#BD3124',\n        textColor: '#FFF'\n      }],\n      tasks: {\n        data: [],\n        links: []\n      },\n      desc: '折叠',\n      changeEnd: true,\n      events: []\n    };\n  },\n  created() {\n    gantt.clearAll();\n  },\n  mounted() {\n    this.init();\n  },\n  methods: {\n    moment,\n    // 获取资源统计数据\n    getResourceInfo() {\n      gantt.config.start_date = this.nowDate.format('YYYY-MM-DD');\n      gantt.config.end_date = this.newDate.format('YYYY-MM-DD');\n    },\n    // 搜索\n    search() {\n      this.params.endDate = moment(this.newDate._d).format('YYYY-MM-DD');\n      gantt.config.start_date = this.params.startDate;\n      gantt.config.end_date = this.params.endDate;\n    },\n    // 初始化\n    init() {\n      console.log('初始化');\n      //中文\n      gantt.i18n.setLocale('cn');\n\n      //自适应甘特图的尺寸大小, 使得在不出现滚动条的情况下, 显示全部任务\n      gantt.config.autosize = false;\n      // 只读模式：打开后不可以操作甘特图\n      gantt.config.readonly = false;\n      gantt.config.date_format = '%Y-%m-%d';\n      gantt.config.keep_grid_width = false;\n      gantt.config.grid_resize = true;\n      gantt.config.initial_scroll = false;\n\n      //是否显示左侧树表格\n      gantt.config.show_grid = true;\n      function byId(list, id) {\n        for (var i = 0; i < list.length; i++) {\n          if (list[i].key == id) return id || '';\n        }\n        return '';\n      }\n      window.byId = byId;\n      let that = this;\n      var duration = function (a, b, c) {\n        var res = gantt.calculateDuration(a.getDate(false), b.getDate(false));\n        c.innerHTML = res + '天';\n      };\n      var calendar_init = function (id, data, date) {\n        var obj = new dhtmlXCalendarObject(id);\n        obj.setDateFormat(data.date_format ? data.date_format : '');\n        obj.setDate(date ? date : new Date());\n        obj.hideTime();\n        if (data.skin) obj.setSkin(data.skin);\n        return obj;\n      };\n      gantt.form_blocks['dhx_calendar'] = {\n        render: function (sns) {\n          return \"<div class='dhx_calendar_cont'><input type='text' readonly='true' id='calendar1'/> &#8211; \" + \"<input type='text' readonly='true' id='calendar2'/><label id='duration'></label></div>\";\n        },\n        set_value: function (node, value, task, data) {\n          var a = node._cal_start = calendar_init('calendar1', data, task.start_date);\n          var b = node._cal_end = calendar_init('calendar2', data, task.end_date);\n          var c = node.lastChild;\n          b.setInsensitiveRange(null, new Date(a.getDate(false) - 86400000));\n          var a_click = a.attachEvent('onClick', function (date) {\n            b.setInsensitiveRange(null, new Date(date.getTime() - 86400000));\n            duration(a, b, c);\n          });\n          var b_click = b.attachEvent('onClick', function (date) {\n            duration(a, b, c);\n          });\n          var a_time_click = a.attachEvent('onChange', function (d) {\n            b.setInsensitiveRange(null, new Date(d.getTime() - 86400000));\n            duration(a, b, c);\n          });\n          var b_time_click = b.attachEvent('onChange', function (d) {\n            that.changeEnd = false;\n            task.end_date = that.setTime(d, true);\n            duration(a, b, c);\n          });\n          var id = gantt.attachEvent('onAfterLightbox', function () {\n            a.detachEvent(a_click);\n            a.detachEvent(a_time_click);\n            a.unload();\n            b.detachEvent(b_click);\n            b.detachEvent(b_time_click);\n            b.unload();\n            a = b = null;\n            this.detachEvent(id);\n          });\n          document.getElementById('calendar1').value = a.getDate(true);\n          document.getElementById('calendar2').value = that.setTime(b.getDate(true), false);\n          duration(a, b, c);\n        },\n        get_value: function (node, task) {\n          task.start_date = node._cal_start.getDate(false);\n          task.end_date = node._cal_end.getDate(false);\n          return task;\n        },\n        focus: function (node) {}\n      };\n      //表格列设置\n      gantt.config.columns = [{\n        //最左侧新增符号列，甘特图内置可选使用列\n        name: 'add',\n        label: '',\n        width: '40'\n      }, {\n        name: 'userName',\n        label: '姓名',\n        tree: true,\n        width: '150'\n      }, {\n        name: 'deptName',\n        label: '部室',\n        width: '100'\n      }, {\n        name: 'site',\n        label: '现场实施人员',\n        hide: true\n      }, {\n        name: 'progorderName',\n        label: '程序',\n        width: '100',\n        hide: true\n      }, {\n        name: 'start_date',\n        label: '开始时间',\n        hide: true\n      }, {\n        name: 'end_date',\n        label: '结束时间',\n        hide: true\n      }, {\n        name: 'flag',\n        label: '是否调配',\n        hide: true\n      }, {\n        name: 'reason',\n        label: '不可调配原因',\n        template: function (item) {\n          return byId(gantt.serverList('staff'), item.reason);\n        },\n        hide: true\n      }, {\n        name: 'state',\n        label: '其他说明',\n        hide: true\n      }];\n      //自适应\n      //gantt.config.fit_tasks = true;\n\n      //连线\n      gantt.config.show_links = false;\n\n      //表头高度\n      gantt.config.scale_height = 80;\n\n      //开启提示：鼠标悬浮在gantt行上显示\n      gantt.plugins({\n        tooltip: true\n      });\n\n      // gantt.config.start_date = new Date(2018,1,1);\n      //   gantt.config.end_date = new Date(2020,1,1);\n\n      //周末样式突出\n      gantt.config.work_time = true;\n      gantt.templates.timeline_cell_class = function (task, date) {\n        if (!gantt.isWorkTime(date)) return 'week_end';\n        return '';\n      };\n      gantt.templates.task_class = function (start, end, task) {\n        var css = [];\n        if (task.flagStr == 0) {\n          css.push('blue_task');\n        } else if (task.flagStr == 1) {\n          css.push('light_blue_task');\n        }\n        if (task.reason) {\n          css = css.filter(item => item !== 'blue_task' && item !== 'light_blue_task');\n          css.push('gantt_resource_task gantt_resource_' + task.reason);\n        }\n        return css.join(' ');\n      };\n\n      //时间轴格式化模版\n      var yearScaleTemplate = function (date) {\n        return date.getFullYear();\n      };\n      var monthScaleTemplate = function (date) {\n        var year = date.getFullYear();\n        var month = date.getMonth();\n        month = month + 1 + '月';\n        let yearTemplate = `${year}年${month}`;\n        return yearTemplate;\n      };\n      //时间轴样式\n      var yearScaleCss = function () {\n        return 'yearScaleStyle';\n      };\n      var monthScaleCss = function () {\n        return 'monthScaleStyle';\n      };\n\n      //定义表头日期\n      gantt.config.scales = [{\n        unit: 'month',\n        step: 1,\n        format: monthScaleTemplate,\n        css: monthScaleCss\n      }, {\n        unit: 'day',\n        step: 1,\n        format: '%D <br/> %d'\n      }\n      //format: function(date){\n      // \treturn \"<strong>Day \" + dayNumber(date) + \"</strong><br/>\" + dateFormat(date);\n      // }\n      ];\n\n      //鼠标移动显示信息\n      gantt.templates.tooltip_text = function (start, end, task) {\n        let endTime = that.setTime(gantt.templates.tooltip_date_format(end), false);\n        if (task.render == 'split') {\n          return '';\n        } else if (task.proGid && task.proGid !== null && task.proGid.indexOf('，') >= 0) {\n          let viewTask = '';\n          task.taskArr.forEach(item => {\n            viewTask += `【${task.userName}-${task.deptName}】<br/>项目编号：${item.proGid}<br/>项目名称：${item.progorderName}<br/>${gantt.templates.tooltip_date_format(start)}~${endTime}<br/>现场实施人员：<br/>${item.names}<br/>`;\n          });\n          return viewTask;\n        } else if (task.reason == null || task.reason == undefined) {\n          return `【${task.userName}-${task.deptName}】<br/>项目编号：${task.proGid}<br/>项目名称：${task.progorderName}<br/>${gantt.templates.tooltip_date_format(start)}~${endTime}<br/>现场实施人员：<br/>${task.site}`;\n        } else if (task.reason !== null) {\n          let obj = that.priorityOptions.find(item => item.key == task.reason);\n          if (obj !== undefined) {\n            return '不可调配原因：' + obj.label;\n          }\n        }\n      };\n\n      // 弹框命名文字\n      gantt.locale.labels.section_priority = '不可调配原因';\n      gantt.locale.labels.section_progorder = '项目名称';\n      gantt.locale.labels.section_userName = '姓名';\n      gantt.locale.labels.section_deptName = '部室';\n      gantt.locale.labels.section_other = '其他说明';\n      gantt.locale.labels.message_ok = '确定';\n      gantt.locale.labels.confirm_deleting = '是否删除？';\n\n      //配置Gantt内置弹出框元素(title内容)\n      gantt.templates.lightbox_header = function (start_date, end_date, task) {\n        // return `<b>${task.userName}属性信息</b>`\n        return `<b>设置不可调配原因</b>`;\n      };\n      gantt.serverList('staff', that.priorityOptions);\n      // 添加弹窗属性\n      gantt.config.lightbox.sections = [\n      // { name: 'userName', height: 30, map_to: 'userName', type: 'textarea', focus: true },\n      // { name: \"deptName\", height: 38, map_to: \"deptName\", type: \"textarea\", focus: true },\n      // { name: 'progorder', height: 38, map_to: 'progorderName', type: 'textarea', focus: true },\n      {\n        name: 'priority',\n        height: 30,\n        map_to: 'reason',\n        type: 'select',\n        options: gantt.serverList('staff')\n      }, {\n        name: 'other',\n        height: 50,\n        map_to: 'state',\n        type: 'textarea',\n        focus: true\n      }, {\n        name: 'time',\n        type: 'dhx_calendar',\n        map_to: 'auto',\n        skin: '',\n        date_format: '%Y-%m-%d'\n      }];\n      console.log('进行中');\n      // //双击事件\n      gantt.config.details_on_dblclick = true;\n      //关闭所有错误提示信息：gantt有自己的异常消息，如果不关闭可能页面会弹出异常消息\n      gantt.config.show_errors = false;\n\n      //禁止拖动设置任务长度\n      gantt.attachEvent('onBeforeTaskDrag', function (id, mode, e) {\n        return false;\n      });\n      //禁止拖动任务\n      gantt.config.drag_move = false;\n      //禁止拖动任务进度\n      gantt.config.drag_progress = false;\n      //禁止拖放添加Link\n      gantt.config.drag_links = false;\n\n      //任务条显示信息\n      gantt.templates.task_text = function (syart, end, task) {\n        console.log(task, 'taskkkk');\n        // var calendar = gantt.getTaskCalendar(task);\n        if (task.reason == 3 || task.reason == 1 || task.reason == 2 || task.reason == 4) {\n          let obj = that.priorityOptions.find(item => item.key == task.reason);\n          if (obj !== undefined) {\n            return obj.label;\n          }\n        } else {\n          if (task.progorderName !== undefined) {\n            return task.progorderName;\n          }\n          return '';\n        }\n      };\n      gantt.attachEvent('onParse', function () {\n        var styleId = 'dynamicGanttStyles';\n        var element = document.getElementById(styleId);\n        if (!element) {\n          element = document.createElement('style');\n          element.id = styleId;\n          document.querySelector('head').appendChild(element);\n        }\n        var html = [];\n        var resources = gantt.serverList('staff');\n        resources.forEach(function (r) {\n          html.push('.gantt_task_line.gantt_resource_' + r.key + '{' + 'background-color:' + r.backgroundColor + '; ' + 'color:' + r.textColor + ';' + '}');\n          html.push('.gantt_row.gantt_resource_' + r.key + ' .gantt_cell:nth-child(1) .gantt_tree_content{' + 'background-color:' + r.backgroundColor + '; ' + 'color:' + r.textColor + ';' + '}');\n        });\n        element.innerHTML = html.join('');\n      });\n      gantt.attachEvent('onTaskDblClick', function (id, e) {\n        if (e.target.className.indexOf('task') == -1) {\n          return false;\n        }\n        gantt.showLightbox(id);\n        return true;\n      });\n      gantt.config.min_column_width = 40;\n      // gantt.ext.zoom.init(zoomConfig);\n      // gantt.ext.zoom.setLevel(\"quarter\");\n\n      // this.$nextTick(() => {\n      //   gantt.clearAll()\n      //   gantt.init(that.$refs.ganttYear)\n      //   gantt.parse(that.tasks)\n      // })\n\n      // 数据解析\n      // gantt.parse(this.tasks)\n      // gantt.render() // 呈现整个甘特图\n      console.log('进行中3');\n\n      //监听按钮保存删除事件  updateResourceReason\n      let onBeforeTaskAdd = gantt.attachEvent('onBeforeTaskAdd', function (id, item) {\n        let endCopy = JSON.parse(JSON.stringify(item.end_date));\n        let endTime = that.setTime(endCopy, false);\n        var params = {\n          userId: item.parent,\n          startDate: moment(item.start_date).format('YYYY-MM-DD'),\n          endDate: moment(item.end_date).format('YYYY-MM-DD'),\n          // endDate: endTime,\n          reason: item.reason,\n          state: item.state\n        };\n        updateResourceReason(params).then(res => {\n          if (res.code == 0) {\n            that.$message.success('新增成功');\n            that.getData();\n            return true;\n          } else {\n            that.$message.warning(res.msg);\n            that.getData();\n            return false;\n          }\n        });\n      });\n      this.events.push(onBeforeTaskAdd);\n      let onBeforeTaskUpdate = gantt.attachEvent('onBeforeTaskUpdate', function (id, item) {\n        console.log('编辑', id, item);\n        // let endCopy = JSON.parse(JSON.stringify(item.end_date))\n        // let endTime = that.setTime(endCopy, false)\n        let endTime, endCopy;\n        if (that.changeEnd) {\n          endCopy = JSON.parse(JSON.stringify(item.end_date));\n          endTime = that.setTime(endCopy, false);\n        } else {\n          endTime = moment(item.end_date).format('YYYY-MM-DD');\n        }\n        var params = {\n          id: item.reasonId,\n          userId: item.userId,\n          startDate: moment(item.start_date).format('YYYY-MM-DD'),\n          // endDate: moment(item.end_date).format('YYYY-MM-DD'),\n          endDate: endTime,\n          reason: item.reason,\n          state: item.state\n        };\n        console.log(7777, item.end_date);\n        updateResourceReason(params).then(res => {\n          console.log(1112444, res);\n          if (res.code == 0) {\n            that.$message.success('更新成功');\n            that.getData();\n            return true;\n          } else {\n            that.$message.warning(res.msg);\n            that.getData();\n            return false;\n          }\n        });\n      });\n      this.events.push(onBeforeTaskUpdate);\n      // delResourceReason\n\n      //监听按钮保存删除事件\n      let onLightboxSave = gantt.attachEvent('onLightboxSave', function (id, task, is_new) {\n        if (task.reason == 4 && (task.state == undefined || task.state == null || task.state == '')) {\n          that.$message.warning('请填写其它说明');\n          return false;\n        }\n        console.log(gantt.config.end_date, gantt.config.start_date);\n        if (is_new) {\n          for (let i = 0; i < that.dataSource.length; i++) {\n            // that.dataSource.map(item => {\n            if (that.dataSource[i].planDtoList !== null && (that.dataSource[i].userId == task.parent || that.dataSource[i].userId == task.userId)) {\n              console.log(9999, that.dataSource[i].planDtoList, task);\n              for (let k = 0; k < that.dataSource[i].planDtoList.length; k++) {\n                // that.dataSource[i].planDtoList.map(element => {\n                var d1 = new Date(that.dataSource[i].planDtoList[k].start_date);\n                var datetime1 = d1.getFullYear() + '-' + (d1.getMonth() + 1) + '-' + d1.getDate();\n                var d2 = new Date(task.start_date);\n                var datetime2 = d2.getFullYear() + '-' + (d2.getMonth() + 1) + '-' + d2.getDate();\n                var d3 = new Date(that.dataSource[i].planDtoList[k].end_date);\n                var datetime3 = d3.getFullYear() + '-' + (d3.getMonth() + 1) + '-' + d3.getDate();\n                var d4 = new Date(task.end_date);\n                var datetime4 = d4.getFullYear() + '-' + (d4.getMonth() + 1) + '-' + d4.getDate();\n                if (datetime1 == datetime2 && datetime3 == datetime4) {\n                  console.log(1119999);\n                  that.$message.warning('时间被占用');\n                  return false;\n                }\n              }\n            }\n          }\n        }\n        return true;\n      });\n      this.events.push(onLightboxSave);\n      let onBeforeTaskDelete = gantt.attachEvent('onBeforeTaskDelete', function (id, item) {\n        console.log(5, item);\n        const params = {\n          id: item.reasonId,\n          userId: item.userId\n        };\n        delResourceReason(params).then(res => {\n          console.log(777, res);\n          if (res.code == 0) {\n            that.$message.success('删除成功');\n            var task = gantt.getTask(id);\n            that.getData();\n            return true;\n          } else {\n            that.$message.warning(res.msg);\n            that.getData();\n            return false;\n          }\n        });\n      });\n      this.events.push(onBeforeTaskDelete);\n      gantt.attachEvent('onBeforeLightbox', function (id) {\n        that.changeEnd = true;\n        var task = gantt.getTask(id);\n        if (task.flagStr == 0) {\n          // gantt.message({text: \"不可调配!\", type: \"completed\"});\n          return false;\n        }\n        return true;\n      }),\n      // 初始化\n      setTimeout(() => {\n        gantt.clearAll();\n        gantt.init(that.$refs.ganttYear);\n        gantt.parse(that.tasks);\n        document.querySelector('.gantt-container').style.height = '500px';\n      }, 1000);\n    },\n    reload() {\n      gantt.clearAll(); // 从甘特图中删除所有任务和其他元素（包括标记）\n      // gantt.init(this.$refs.ganttYear)\n      gantt.parse(this.tasks); // 数据解析\n      gantt.render(); // 呈现整个甘特图\n    },\n\n    getData() {\n      var arrTaskNew = [];\n      console.log(this.officeArr[0]);\n      this.params.startDate = moment(this.nowDate).format('YYYY-MM-DD');\n      this.params.endDate = moment(this.newDate).format('YYYY-MM-DD');\n      getCalendarInfo(this.params).then(res => {\n        console.log('查询', res);\n        if (res.code == 0) {\n          this.dataSource = res.data;\n          this.dataSource.forEach((item, index) => {\n            // console.log(item)\n            item.render = 'split';\n            item.id = item.userId;\n            item.start_date = '';\n            item.end_date = '';\n            item.type = gantt.config.types.task;\n            arrTaskNew.push(item);\n            if (item.planDtoList !== null) {\n              item.planDtoList.forEach((item1, index1) => {\n                item1.parent = item.id;\n                item1.start_date = item1.startDate;\n                item1.end_date = this.setTime(item1.endDate, true);\n                let str = '';\n                if (item1.proGid !== null && item1.proGid.indexOf('，') == -1) {\n                  item1.personMap[item1.proGid].forEach((item2, index2) => {\n                    str += item2.names + '<br/>';\n                  });\n                  item1.site = str;\n                  // 如果多个时间相同的任务重叠\n                } else if (item1.proGid !== null && item1.proGid.indexOf('，') >= 0) {\n                  item1.taskArr = [];\n                  let proGidArr = item1.proGid.split('，');\n                  let progorderNameArr = item1.progorderName.split('，');\n                  proGidArr.forEach((item3, index3) => {\n                    let objtask = {\n                      proGid: '',\n                      progorderName: '',\n                      names: ''\n                    };\n                    objtask.proGid = item3;\n                    objtask.progorderName = progorderNameArr[index3];\n                    item1.personMap[item3].forEach((item4, index4) => {\n                      objtask.names += item4.names + '<br/>';\n                    });\n                    item1.taskArr.push(objtask);\n                  });\n                }\n                arrTaskNew.push(item1);\n              });\n            }\n          });\n          this.tasks.data = arrTaskNew;\n          console.log(arrTaskNew, 'arrTaskNew');\n          // this.init()\n          this.reload();\n        } else {\n          this.$message.warning(res.msg);\n        }\n      });\n    },\n    setTime(date, bool) {\n      if (date == null || !date) return null;\n      var dateTime;\n      if (typeof date == 'string') {\n        dateTime = new Date(date);\n      } else {\n        dateTime = date;\n      }\n      if (bool) {\n        dateTime = dateTime.setDate(dateTime.getDate() + 1);\n        dateTime = new Date(dateTime);\n      } else {\n        dateTime = dateTime.setDate(dateTime.getDate() - 1);\n        dateTime = new Date(dateTime);\n      }\n      if (typeof date == 'string') {\n        return this.changeDate(dateTime);\n      } else {\n        return dateTime;\n      }\n    },\n    changeDate(chinaTime) {\n      if (typeof date == 'string') return chinaTime;\n      let m = chinaTime.getMonth() + 1;\n      let d = chinaTime.getDate();\n      if (m >= 0 && m <= 9) {\n        m = '0' + m;\n      }\n      if (d >= 0 && d <= 9) {\n        d = '0' + d;\n      }\n      return chinaTime.getFullYear() + '-' + m + '-' + d;\n    },\n    queryApi() {}\n  },\n  computed: {},\n  beforeDestroy() {\n    // gantt.destructor()\n    this.events.forEach(ele => {\n      gantt.detachEvent(ele);\n    });\n  }\n};","map":{"version":3,"names":["gantt","moment","name","components","resoureceDetail","data","params","deptIds","startDate","endDate","searchValue","conditions","htmlUrl","dataSource","ganttHeight","innerHeight","ganttLoading","dialogVisible","priorityOptions","key","label","backgroundColor","textColor","tasks","links","desc","changeEnd","events","created","clearAll","mounted","init","methods","getResourceInfo","config","start_date","nowDate","format","end_date","newDate","search","_d","console","log","i18n","setLocale","autosize","readonly","date_format","keep_grid_width","grid_resize","initial_scroll","show_grid","byId","list","id","i","length","window","that","duration","a","b","c","res","calculateDuration","getDate","innerHTML","calendar_init","date","obj","dhtmlXCalendarObject","setDateFormat","setDate","Date","hideTime","skin","setSkin","form_blocks","render","sns","set_value","node","value","task","_cal_start","_cal_end","lastChild","setInsensitiveRange","a_click","attachEvent","getTime","b_click","a_time_click","d","b_time_click","setTime","detachEvent","unload","document","getElementById","get_value","focus","columns","width","tree","hide","template","item","serverList","reason","show_links","scale_height","plugins","tooltip","work_time","templates","timeline_cell_class","isWorkTime","task_class","start","end","css","flagStr","push","filter","join","yearScaleTemplate","getFullYear","monthScaleTemplate","year","month","getMonth","yearTemplate","yearScaleCss","monthScaleCss","scales","unit","step","tooltip_text","endTime","tooltip_date_format","proGid","indexOf","viewTask","taskArr","forEach","userName","deptName","progorderName","names","undefined","site","find","locale","labels","section_priority","section_progorder","section_userName","section_deptName","section_other","message_ok","confirm_deleting","lightbox_header","lightbox","sections","height","map_to","type","options","details_on_dblclick","show_errors","mode","e","drag_move","drag_progress","drag_links","task_text","syart","styleId","element","createElement","querySelector","appendChild","html","resources","r","target","className","showLightbox","min_column_width","onBeforeTaskAdd","endCopy","JSON","parse","stringify","userId","parent","state","updateResourceReason","then","code","$message","success","getData","warning","msg","onBeforeTaskUpdate","reasonId","onLightboxSave","is_new","planDtoList","k","d1","datetime1","d2","datetime2","d3","datetime3","d4","datetime4","onBeforeTaskDelete","delResourceReason","getTask","setTimeout","$refs","ganttYear","style","reload","arrTaskNew","officeArr","getCalendarInfo","index","types","item1","index1","str","personMap","item2","index2","proGidArr","split","progorderNameArr","item3","index3","objtask","item4","index4","bool","dateTime","changeDate","chinaTime","m","queryApi","computed","beforeDestroy","ele"],"sources":["src/components/Gantt/Gantetu.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <div ref=\"ganttYear\" id=\"ganttYearDom\" class=\"gantt-container\" style=\"width: 100%; height: 450px\"></div>\r\n    </div>\r\n  </template>\r\n   \r\n  <script>\r\n  import gantt from 'dhtmlx-gantt'\r\n  import 'dhtmlx-gantt/codebase/dhtmlxgantt.css'\r\n  import moment from 'moment'\r\n  export default {\r\n    name: 'resourcePlan',\r\n    components: {\r\n      resoureceDetail,\r\n    },\r\n    data() {\r\n      return {\r\n        //甘特图\r\n        params: {\r\n          deptIds: [],\r\n          startDate: '',\r\n          endDate: '',\r\n          searchValue: '',\r\n          conditions: [],\r\n        },\r\n        htmlUrl: '',\r\n        // 甘特图数据格式\r\n        dataSource: [],\r\n        ganttHeight: innerHeight - 215 + 'px',\r\n        ganttLoading: false,\r\n        dialogVisible: false,\r\n        priorityOptions: [\r\n          { key: '1', label: '编制报告', backgroundColor: '#BD3124', textColor: '#FFF' },\r\n          { key: '2', label: '准备进场新项目', backgroundColor: '#BD3124', textColor: '#FFF' },\r\n          { key: '3', label: '请假休整', backgroundColor: '#81B336', textColor: '#FFF' },\r\n          { key: '4', label: '其他', backgroundColor: '#BD3124', textColor: '#FFF' },\r\n        ],\r\n        tasks: {\r\n          data: [],\r\n          links: [],\r\n        },\r\n        desc: '折叠',\r\n        changeEnd: true,\r\n        events: [],\r\n      }\r\n    },\r\n    created() {\r\n      gantt.clearAll()\r\n    },\r\n    mounted() {\r\n      this.init()\r\n    },\r\n    methods: {\r\n      moment,\r\n      // 获取资源统计数据\r\n      getResourceInfo() {\r\n        gantt.config.start_date = this.nowDate.format('YYYY-MM-DD')\r\n        gantt.config.end_date = this.newDate.format('YYYY-MM-DD')\r\n      },\r\n      // 搜索\r\n      search() {\r\n        this.params.endDate = moment(this.newDate._d).format('YYYY-MM-DD')\r\n        gantt.config.start_date = this.params.startDate\r\n        gantt.config.end_date = this.params.endDate\r\n      },\r\n   \r\n      // 初始化\r\n      init() {\r\n        console.log('初始化')\r\n        //中文\r\n        gantt.i18n.setLocale('cn')\r\n   \r\n        //自适应甘特图的尺寸大小, 使得在不出现滚动条的情况下, 显示全部任务\r\n        gantt.config.autosize = false\r\n        // 只读模式：打开后不可以操作甘特图\r\n        gantt.config.readonly = false\r\n        gantt.config.date_format = '%Y-%m-%d'\r\n   \r\n        gantt.config.keep_grid_width = false\r\n        gantt.config.grid_resize = true\r\n        gantt.config.initial_scroll = false\r\n   \r\n        //是否显示左侧树表格\r\n        gantt.config.show_grid = true\r\n        function byId(list, id) {\r\n          for (var i = 0; i < list.length; i++) {\r\n            if (list[i].key == id) return id || ''\r\n          }\r\n          return ''\r\n        }\r\n        window.byId = byId\r\n        let that = this\r\n   \r\n        var duration = function (a, b, c) {\r\n          var res = gantt.calculateDuration(a.getDate(false), b.getDate(false))\r\n          c.innerHTML = res + '天'\r\n        }\r\n   \r\n        var calendar_init = function (id, data, date) {\r\n          var obj = new dhtmlXCalendarObject(id)\r\n          obj.setDateFormat(data.date_format ? data.date_format : '')\r\n          obj.setDate(date ? date : new Date())\r\n          obj.hideTime()\r\n          if (data.skin) obj.setSkin(data.skin)\r\n          return obj\r\n        }\r\n   \r\n        gantt.form_blocks['dhx_calendar'] = {\r\n          render: function (sns) {\r\n            return (\r\n              \"<div class='dhx_calendar_cont'><input type='text' readonly='true' id='calendar1'/> &#8211; \" +\r\n              \"<input type='text' readonly='true' id='calendar2'/><label id='duration'></label></div>\"\r\n            )\r\n          },\r\n          set_value: function (node, value, task, data) {\r\n            var a = (node._cal_start = calendar_init('calendar1', data, task.start_date))\r\n            var b = (node._cal_end = calendar_init('calendar2', data, task.end_date))\r\n            var c = node.lastChild\r\n   \r\n            b.setInsensitiveRange(null, new Date(a.getDate(false) - 86400000))\r\n   \r\n            var a_click = a.attachEvent('onClick', function (date) {\r\n              b.setInsensitiveRange(null, new Date(date.getTime() - 86400000))\r\n              duration(a, b, c)\r\n            })\r\n   \r\n            var b_click = b.attachEvent('onClick', function (date) {\r\n              duration(a, b, c)\r\n            })\r\n   \r\n            var a_time_click = a.attachEvent('onChange', function (d) {\r\n              b.setInsensitiveRange(null, new Date(d.getTime() - 86400000))\r\n              duration(a, b, c)\r\n            })\r\n   \r\n            var b_time_click = b.attachEvent('onChange', function (d) {\r\n              that.changeEnd = false\r\n              task.end_date = that.setTime(d, true)\r\n              duration(a, b, c)\r\n            })\r\n   \r\n            var id = gantt.attachEvent('onAfterLightbox', function () {\r\n              a.detachEvent(a_click)\r\n              a.detachEvent(a_time_click)\r\n              a.unload()\r\n              b.detachEvent(b_click)\r\n              b.detachEvent(b_time_click)\r\n              b.unload()\r\n              a = b = null\r\n              this.detachEvent(id)\r\n            })\r\n   \r\n            document.getElementById('calendar1').value = a.getDate(true)\r\n            document.getElementById('calendar2').value = that.setTime(b.getDate(true), false)\r\n            duration(a, b, c)\r\n          },\r\n          get_value: function (node, task) {\r\n            task.start_date = node._cal_start.getDate(false)\r\n            task.end_date = node._cal_end.getDate(false)\r\n            return task\r\n          },\r\n          focus: function (node) {},\r\n        }\r\n        //表格列设置\r\n        gantt.config.columns = [\r\n          {\r\n            //最左侧新增符号列，甘特图内置可选使用列\r\n            name: 'add',\r\n            label: '',\r\n            width: '40',\r\n          },\r\n          {\r\n            name: 'userName',\r\n            label: '姓名',\r\n            tree: true,\r\n            width: '150',\r\n          },\r\n          {\r\n            name: 'deptName',\r\n            label: '部室',\r\n            width: '100',\r\n          },\r\n          {\r\n            name: 'site',\r\n            label: '现场实施人员',\r\n            hide: true,\r\n          },\r\n          {\r\n            name: 'progorderName',\r\n            label: '程序',\r\n            width: '100',\r\n            hide: true,\r\n          },\r\n          {\r\n            name: 'start_date',\r\n            label: '开始时间',\r\n            hide: true,\r\n          },\r\n          {\r\n            name: 'end_date',\r\n            label: '结束时间',\r\n            hide: true,\r\n          },\r\n          {\r\n            name: 'flag',\r\n            label: '是否调配',\r\n            hide: true,\r\n          },\r\n          {\r\n            name: 'reason',\r\n            label: '不可调配原因',\r\n            template: function (item) {\r\n              return byId(gantt.serverList('staff'), item.reason)\r\n            },\r\n            hide: true,\r\n          },\r\n          {\r\n            name: 'state',\r\n            label: '其他说明',\r\n            hide: true,\r\n          },\r\n        ]\r\n        //自适应\r\n        //gantt.config.fit_tasks = true;\r\n   \r\n        //连线\r\n        gantt.config.show_links = false\r\n   \r\n        //表头高度\r\n        gantt.config.scale_height = 80\r\n   \r\n        //开启提示：鼠标悬浮在gantt行上显示\r\n        gantt.plugins({\r\n          tooltip: true,\r\n        })\r\n   \r\n        // gantt.config.start_date = new Date(2018,1,1);\r\n        //   gantt.config.end_date = new Date(2020,1,1);\r\n   \r\n        //周末样式突出\r\n        gantt.config.work_time = true\r\n        gantt.templates.timeline_cell_class = function (task, date) {\r\n          if (!gantt.isWorkTime(date)) return 'week_end'\r\n          return ''\r\n        }\r\n   \r\n        gantt.templates.task_class = function (start, end, task) {\r\n          var css = []\r\n          if (task.flagStr == 0) {\r\n            css.push('blue_task')\r\n          } else if (task.flagStr == 1) {\r\n            css.push('light_blue_task')\r\n          }\r\n   \r\n          if (task.reason) {\r\n            css = css.filter((item) => item !== 'blue_task' && item !== 'light_blue_task')\r\n            css.push('gantt_resource_task gantt_resource_' + task.reason)\r\n          }\r\n          return css.join(' ')\r\n        }\r\n   \r\n        //时间轴格式化模版\r\n        var yearScaleTemplate = function (date) {\r\n          return date.getFullYear()\r\n        }\r\n        var monthScaleTemplate = function (date) {\r\n          var year = date.getFullYear()\r\n          var month = date.getMonth()\r\n          month = month + 1 + '月'\r\n          let yearTemplate = `${year}年${month}`\r\n          return yearTemplate\r\n        }\r\n        //时间轴样式\r\n        var yearScaleCss = function () {\r\n          return 'yearScaleStyle'\r\n        }\r\n        var monthScaleCss = function () {\r\n          return 'monthScaleStyle'\r\n        }\r\n   \r\n        //定义表头日期\r\n        gantt.config.scales = [\r\n          { unit: 'month', step: 1, format: monthScaleTemplate, css: monthScaleCss },\r\n          { unit: 'day', step: 1, format: '%D <br/> %d' },\r\n          //format: function(date){\r\n          // \treturn \"<strong>Day \" + dayNumber(date) + \"</strong><br/>\" + dateFormat(date);\r\n          // }\r\n        ]\r\n   \r\n        //鼠标移动显示信息\r\n        gantt.templates.tooltip_text = function (start, end, task) {\r\n          let endTime = that.setTime(gantt.templates.tooltip_date_format(end), false)\r\n          if (task.render == 'split') {\r\n            return ''\r\n          } else if (task.proGid && task.proGid !== null && task.proGid.indexOf('，') >= 0) {\r\n            let viewTask = ''\r\n            task.taskArr.forEach((item) => {\r\n              viewTask += `【${task.userName}-${task.deptName}】<br/>项目编号：${item.proGid}<br/>项目名称：${\r\n                item.progorderName\r\n              }<br/>${gantt.templates.tooltip_date_format(start)}~${endTime}<br/>现场实施人员：<br/>${item.names}<br/>`\r\n            })\r\n            return viewTask\r\n          } else if (task.reason == null || task.reason == undefined) {\r\n            return `【${task.userName}-${task.deptName}】<br/>项目编号：${task.proGid}<br/>项目名称：${\r\n              task.progorderName\r\n            }<br/>${gantt.templates.tooltip_date_format(start)}~${endTime}<br/>现场实施人员：<br/>${task.site}`\r\n          } else if (task.reason !== null) {\r\n            let obj = that.priorityOptions.find((item) => item.key == task.reason)\r\n            if (obj !== undefined) {\r\n              return '不可调配原因：' + obj.label\r\n            }\r\n          }\r\n        }\r\n   \r\n        // 弹框命名文字\r\n        gantt.locale.labels.section_priority = '不可调配原因'\r\n        gantt.locale.labels.section_progorder = '项目名称'\r\n        gantt.locale.labels.section_userName = '姓名'\r\n        gantt.locale.labels.section_deptName = '部室'\r\n        gantt.locale.labels.section_other = '其他说明'\r\n        gantt.locale.labels.message_ok = '确定'\r\n        gantt.locale.labels.confirm_deleting = '是否删除？'\r\n   \r\n        //配置Gantt内置弹出框元素(title内容)\r\n        gantt.templates.lightbox_header = function (start_date, end_date, task) {\r\n          // return `<b>${task.userName}属性信息</b>`\r\n          return `<b>设置不可调配原因</b>`\r\n        }\r\n        gantt.serverList('staff', that.priorityOptions)\r\n        // 添加弹窗属性\r\n        gantt.config.lightbox.sections = [\r\n          // { name: 'userName', height: 30, map_to: 'userName', type: 'textarea', focus: true },\r\n          // { name: \"deptName\", height: 38, map_to: \"deptName\", type: \"textarea\", focus: true },\r\n          // { name: 'progorder', height: 38, map_to: 'progorderName', type: 'textarea', focus: true },\r\n          { name: 'priority', height: 30, map_to: 'reason', type: 'select', options: gantt.serverList('staff') },\r\n          { name: 'other', height: 50, map_to: 'state', type: 'textarea', focus: true },\r\n          { name: 'time', type: 'dhx_calendar', map_to: 'auto', skin: '', date_format: '%Y-%m-%d' },\r\n        ]\r\n        console.log('进行中')\r\n        // //双击事件\r\n        gantt.config.details_on_dblclick = true\r\n        //关闭所有错误提示信息：gantt有自己的异常消息，如果不关闭可能页面会弹出异常消息\r\n        gantt.config.show_errors = false\r\n   \r\n        //禁止拖动设置任务长度\r\n        gantt.attachEvent('onBeforeTaskDrag', function (id, mode, e) {\r\n          return false\r\n        })\r\n        //禁止拖动任务\r\n        gantt.config.drag_move = false\r\n        //禁止拖动任务进度\r\n        gantt.config.drag_progress = false\r\n        //禁止拖放添加Link\r\n        gantt.config.drag_links = false\r\n   \r\n        //任务条显示信息\r\n        gantt.templates.task_text = function (syart, end, task) {\r\n          console.log(task, 'taskkkk')\r\n          // var calendar = gantt.getTaskCalendar(task);\r\n          if (task.reason == 3 || task.reason == 1 || task.reason == 2 || task.reason == 4) {\r\n            let obj = that.priorityOptions.find((item) => item.key == task.reason)\r\n            if (obj !== undefined) {\r\n              return obj.label\r\n            }\r\n          } else {\r\n            if (task.progorderName !== undefined) {\r\n              return task.progorderName\r\n            }\r\n            return ''\r\n          }\r\n        }\r\n   \r\n        gantt.attachEvent('onParse', function () {\r\n          var styleId = 'dynamicGanttStyles'\r\n          var element = document.getElementById(styleId)\r\n          if (!element) {\r\n            element = document.createElement('style')\r\n            element.id = styleId\r\n            document.querySelector('head').appendChild(element)\r\n          }\r\n          var html = []\r\n          var resources = gantt.serverList('staff')\r\n   \r\n          resources.forEach(function (r) {\r\n            html.push(\r\n              '.gantt_task_line.gantt_resource_' +\r\n                r.key +\r\n                '{' +\r\n                'background-color:' +\r\n                r.backgroundColor +\r\n                '; ' +\r\n                'color:' +\r\n                r.textColor +\r\n                ';' +\r\n                '}'\r\n            )\r\n            html.push(\r\n              '.gantt_row.gantt_resource_' +\r\n                r.key +\r\n                ' .gantt_cell:nth-child(1) .gantt_tree_content{' +\r\n                'background-color:' +\r\n                r.backgroundColor +\r\n                '; ' +\r\n                'color:' +\r\n                r.textColor +\r\n                ';' +\r\n                '}'\r\n            )\r\n          })\r\n          element.innerHTML = html.join('')\r\n        })\r\n   \r\n        gantt.attachEvent('onTaskDblClick', function (id, e) {\r\n          if (e.target.className.indexOf('task') == -1) {\r\n            return false\r\n          }\r\n          gantt.showLightbox(id)\r\n          return true\r\n        })\r\n   \r\n        gantt.config.min_column_width = 40\r\n        // gantt.ext.zoom.init(zoomConfig);\r\n        // gantt.ext.zoom.setLevel(\"quarter\");\r\n   \r\n        // this.$nextTick(() => {\r\n        //   gantt.clearAll()\r\n        //   gantt.init(that.$refs.ganttYear)\r\n        //   gantt.parse(that.tasks)\r\n        // })\r\n   \r\n        // 数据解析\r\n        // gantt.parse(this.tasks)\r\n        // gantt.render() // 呈现整个甘特图\r\n        console.log('进行中3')\r\n   \r\n        //监听按钮保存删除事件  updateResourceReason\r\n        let onBeforeTaskAdd = gantt.attachEvent('onBeforeTaskAdd', function (id, item) {\r\n          let endCopy = JSON.parse(JSON.stringify(item.end_date))\r\n          let endTime = that.setTime(endCopy, false)\r\n          var params = {\r\n            userId: item.parent,\r\n            startDate: moment(item.start_date).format('YYYY-MM-DD'),\r\n            endDate: moment(item.end_date).format('YYYY-MM-DD'),\r\n            // endDate: endTime,\r\n            reason: item.reason,\r\n            state: item.state,\r\n          }\r\n          updateResourceReason(params).then((res) => {\r\n            if (res.code == 0) {\r\n              that.$message.success('新增成功')\r\n              that.getData()\r\n              return true\r\n            } else {\r\n              that.$message.warning(res.msg)\r\n              that.getData()\r\n              return false\r\n            }\r\n          })\r\n        })\r\n   \r\n        this.events.push(onBeforeTaskAdd)\r\n   \r\n        let onBeforeTaskUpdate = gantt.attachEvent('onBeforeTaskUpdate', function (id, item) {\r\n          console.log('编辑', id, item)\r\n          // let endCopy = JSON.parse(JSON.stringify(item.end_date))\r\n          // let endTime = that.setTime(endCopy, false)\r\n          let endTime, endCopy\r\n          if (that.changeEnd) {\r\n            endCopy = JSON.parse(JSON.stringify(item.end_date))\r\n            endTime = that.setTime(endCopy, false)\r\n          } else {\r\n            endTime = moment(item.end_date).format('YYYY-MM-DD')\r\n          }\r\n          var params = {\r\n            id: item.reasonId,\r\n            userId: item.userId,\r\n            startDate: moment(item.start_date).format('YYYY-MM-DD'),\r\n            // endDate: moment(item.end_date).format('YYYY-MM-DD'),\r\n            endDate: endTime,\r\n            reason: item.reason,\r\n            state: item.state,\r\n          }\r\n          console.log(7777, item.end_date)\r\n          updateResourceReason(params).then((res) => {\r\n            console.log(1112444, res)\r\n            if (res.code == 0) {\r\n              that.$message.success('更新成功')\r\n              that.getData()\r\n              return true\r\n            } else {\r\n              that.$message.warning(res.msg)\r\n              that.getData()\r\n              return false\r\n            }\r\n          })\r\n        })\r\n        this.events.push(onBeforeTaskUpdate)\r\n        // delResourceReason\r\n   \r\n        //监听按钮保存删除事件\r\n        let onLightboxSave = gantt.attachEvent('onLightboxSave', function (id, task, is_new) {\r\n          if (task.reason == 4 && (task.state == undefined || task.state == null || task.state == '')) {\r\n            that.$message.warning('请填写其它说明')\r\n            return false\r\n          }\r\n          console.log(gantt.config.end_date, gantt.config.start_date)\r\n          if (is_new) {\r\n            for (let i = 0; i < that.dataSource.length; i++) {\r\n              // that.dataSource.map(item => {\r\n              if (\r\n                that.dataSource[i].planDtoList !== null &&\r\n                (that.dataSource[i].userId == task.parent || that.dataSource[i].userId == task.userId)\r\n              ) {\r\n                console.log(9999, that.dataSource[i].planDtoList, task)\r\n                for (let k = 0; k < that.dataSource[i].planDtoList.length; k++) {\r\n                  // that.dataSource[i].planDtoList.map(element => {\r\n                  var d1 = new Date(that.dataSource[i].planDtoList[k].start_date)\r\n                  var datetime1 = d1.getFullYear() + '-' + (d1.getMonth() + 1) + '-' + d1.getDate()\r\n   \r\n                  var d2 = new Date(task.start_date)\r\n                  var datetime2 = d2.getFullYear() + '-' + (d2.getMonth() + 1) + '-' + d2.getDate()\r\n   \r\n                  var d3 = new Date(that.dataSource[i].planDtoList[k].end_date)\r\n                  var datetime3 = d3.getFullYear() + '-' + (d3.getMonth() + 1) + '-' + d3.getDate()\r\n   \r\n                  var d4 = new Date(task.end_date)\r\n                  var datetime4 = d4.getFullYear() + '-' + (d4.getMonth() + 1) + '-' + d4.getDate()\r\n   \r\n                  if (datetime1 == datetime2 && datetime3 == datetime4) {\r\n                    console.log(1119999)\r\n                    that.$message.warning('时间被占用')\r\n                    return false\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          return true\r\n        })\r\n        this.events.push(onLightboxSave)\r\n        let onBeforeTaskDelete = gantt.attachEvent('onBeforeTaskDelete', function (id, item) {\r\n          console.log(5, item)\r\n          const params = {\r\n            id: item.reasonId,\r\n            userId: item.userId,\r\n          }\r\n          delResourceReason(params).then((res) => {\r\n            console.log(777, res)\r\n            if (res.code == 0) {\r\n              that.$message.success('删除成功')\r\n              var task = gantt.getTask(id)\r\n              that.getData()\r\n              return true\r\n            } else {\r\n              that.$message.warning(res.msg)\r\n              that.getData()\r\n              return false\r\n            }\r\n          })\r\n        })\r\n        this.events.push(onBeforeTaskDelete)\r\n   \r\n        gantt.attachEvent('onBeforeLightbox', function (id) {\r\n          that.changeEnd = true\r\n          var task = gantt.getTask(id)\r\n          if (task.flagStr == 0) {\r\n            // gantt.message({text: \"不可调配!\", type: \"completed\"});\r\n            return false\r\n          }\r\n          return true\r\n        }),\r\n          // 初始化\r\n          setTimeout(() => {\r\n            gantt.clearAll()\r\n            gantt.init(that.$refs.ganttYear)\r\n            gantt.parse(that.tasks)\r\n            document.querySelector('.gantt-container').style.height = '500px'\r\n          }, 1000)\r\n      },\r\n      reload() {\r\n        gantt.clearAll() // 从甘特图中删除所有任务和其他元素（包括标记）\r\n        // gantt.init(this.$refs.ganttYear)\r\n        gantt.parse(this.tasks) // 数据解析\r\n        gantt.render() // 呈现整个甘特图\r\n      },\r\n      getData() {\r\n        var arrTaskNew = []\r\n        console.log(this.officeArr[0])\r\n        this.params.startDate = moment(this.nowDate).format('YYYY-MM-DD')\r\n        this.params.endDate = moment(this.newDate).format('YYYY-MM-DD')\r\n        getCalendarInfo(this.params).then((res) => {\r\n          console.log('查询', res)\r\n          if (res.code == 0) {\r\n            this.dataSource = res.data\r\n            this.dataSource.forEach((item, index) => {\r\n              // console.log(item)\r\n              item.render = 'split'\r\n              item.id = item.userId\r\n              item.start_date = ''\r\n              item.end_date = ''\r\n              item.type = gantt.config.types.task\r\n              arrTaskNew.push(item)\r\n              if (item.planDtoList !== null) {\r\n                item.planDtoList.forEach((item1, index1) => {\r\n                  item1.parent = item.id\r\n                  item1.start_date = item1.startDate\r\n                  item1.end_date = this.setTime(item1.endDate, true)\r\n                  let str = ''\r\n                  if (item1.proGid !== null && item1.proGid.indexOf('，') == -1) {\r\n                    item1.personMap[item1.proGid].forEach((item2, index2) => {\r\n                      str += item2.names + '<br/>'\r\n                    })\r\n                    item1.site = str\r\n                    // 如果多个时间相同的任务重叠\r\n                  } else if (item1.proGid !== null && item1.proGid.indexOf('，') >= 0) {\r\n                    item1.taskArr = []\r\n                    let proGidArr = item1.proGid.split('，')\r\n                    let progorderNameArr = item1.progorderName.split('，')\r\n                    proGidArr.forEach((item3, index3) => {\r\n                      let objtask = {\r\n                        proGid: '',\r\n                        progorderName: '',\r\n                        names: '',\r\n                      }\r\n                      objtask.proGid = item3\r\n                      objtask.progorderName = progorderNameArr[index3]\r\n                      item1.personMap[item3].forEach((item4, index4) => {\r\n                        objtask.names += item4.names + '<br/>'\r\n                      })\r\n                      item1.taskArr.push(objtask)\r\n                    })\r\n                  }\r\n                  arrTaskNew.push(item1)\r\n                })\r\n              }\r\n            })\r\n   \r\n            this.tasks.data = arrTaskNew\r\n            console.log(arrTaskNew, 'arrTaskNew')\r\n            // this.init()\r\n            this.reload()\r\n          } else {\r\n            this.$message.warning(res.msg)\r\n          }\r\n        })\r\n      },\r\n      setTime(date, bool) {\r\n        if (date == null || !date) return null\r\n        var dateTime\r\n        if (typeof date == 'string') {\r\n          dateTime = new Date(date)\r\n        } else {\r\n          dateTime = date\r\n        }\r\n        if (bool) {\r\n          dateTime = dateTime.setDate(dateTime.getDate() + 1)\r\n          dateTime = new Date(dateTime)\r\n        } else {\r\n          dateTime = dateTime.setDate(dateTime.getDate() - 1)\r\n          dateTime = new Date(dateTime)\r\n        }\r\n        if (typeof date == 'string') {\r\n          return this.changeDate(dateTime)\r\n        } else {\r\n          return dateTime\r\n        }\r\n      },\r\n      changeDate(chinaTime) {\r\n        if (typeof date == 'string') return chinaTime\r\n        let m = chinaTime.getMonth() + 1\r\n        let d = chinaTime.getDate()\r\n        if (m >= 0 && m <= 9) {\r\n          m = '0' + m\r\n        }\r\n        if (d >= 0 && d <= 9) {\r\n          d = '0' + d\r\n        }\r\n        return chinaTime.getFullYear() + '-' + m + '-' + d\r\n      },\r\n      queryApi() {},\r\n    },\r\n    computed: {\r\n   \r\n    },\r\n    beforeDestroy() {\r\n      // gantt.destructor()\r\n      this.events.forEach((ele) => {\r\n        gantt.detachEvent(ele)\r\n      })\r\n    },\r\n  }\r\n  </script>\r\n   \r\n  <style scoped lang=\"scss\">\r\n  .gantt-container {\r\n    height: 500px;\r\n    min-height: 400px;\r\n    max-height: 800px !important;\r\n    overflow-y: auto !important;\r\n  }\r\n  .radioRow {\r\n    margin: 10px;\r\n    margin-bottom: 10px;\r\n    display: flex;\r\n    align-items: center;\r\n    flex-wrap: wrap;\r\n  }\r\n  .dhx_calendar_cont input {\r\n    width: 96px;\r\n    padding: 0;\r\n    margin: 3px 10px 10px 10px;\r\n    font-size: 11px;\r\n    height: 17px;\r\n    text-align: center;\r\n    border: 1px solid #ccc;\r\n    color: #646464;\r\n  }\r\n   \r\n  .dhtmlxcalendar_dhx_skyblue,\r\n  .dhtmlxcalendar_dhx_web,\r\n  .dhtmlxcalendar_dhx_terrace {\r\n    z-index: 999999 !important;\r\n  }\r\n  </style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}